
R version 4.2.1 (2022-06-23) -- "Funny-Looking Kid"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## FLASH
> 
> INU_vec <- c("00", "10", "20")
> all_normal <- c()
> all_DL     <- c()
> 
> for(i in 1:3){
+     f1 <- paste0("values/FLASH-pred-noise-5-INU-", INU_vec[i], ".csv")
+     f2 <- paste0("values/FLASH-DL-pred-noise-5-INU-", INU_vec[i], ".csv")
+ 
+     all_normal <- rbind(all_normal, as.matrix(read.csv(f1, header = F))[c(6,7,3, 13,14,10), ])
+     all_DL     <- rbind(all_DL    , as.matrix(read.csv(f2, header = F))[c(6,7,3, 13,14,10), ])
+ }
> 
> all_normal <- data.frame(all_normal)
> all_DL <- data.frame(all_DL)
> 
> method <- rep(c("LS", "MLE"), each=3, times=3)  # The second will be 3
> measures <- rep(c("MAPE", "RMSPE", "SSIM"), 3 * 2)
> INU <- rep(INU_vec, each = 3 * 2)
> DL <- rep(c(F, T), each = 3 * 3 * 2)
> 
> all_normal <- cbind(measures, INU, method, all_normal)
> all_DL     <- cbind(measures, INU, method, all_DL    )
> 
> all_dat <- cbind(DL, rbind(all_normal, all_DL))
> all_dat$INU <- as.numeric(all_dat$INU)
> 
> rm(DL)
> rm(measures)
> rm(INU)
> 
> 
> 
> 
> 
> 
> 
> 
> 
> library(tidyverse)
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──
✔ ggplot2 3.3.5     ✔ purrr   0.3.4
✔ tibble  3.1.6     ✔ dplyr   1.0.7
✔ tidyr   1.1.4     ✔ stringr 1.4.0
✔ readr   2.1.1     ✔ forcats 0.5.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
> library(lme4)
Loading required package: Matrix

Attaching package: ‘Matrix’

The following objects are masked from ‘package:tidyr’:

    expand, pack, unpack

> 
> 
> tmp_dat <- all_dat %>%
+     filter(measures == "SSIM") %>%
+     filter(method == "MLE") %>%
+     pivot_longer(!c(DL, measures, INU, method), names_to = "img", values_to = "vals") 
> 
> 
> tmp_dat$INUf <- factor(tmp_dat$INU)
> (mod_test <- lmer(vals ~ DL * INUf + (1 | img), tmp_dat))   # random effect for intercept
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * INUf + (1 | img)
   Data: tmp_dat
REML criterion at convergence: 157.5026
Random effects:
 Groups   Name        Std.Dev.
 img      (Intercept) 2.0888  
 Residual             0.7964  
Number of obs: 54, groups:  img, 9
Fixed Effects:
  (Intercept)         DLTRUE         INUf10         INUf20  DLTRUE:INUf10  
      88.1503         6.9250        -1.3667        -1.5792         0.8400  
DLTRUE:INUf20  
       0.3405  
> 
> library(emmeans)
> emmeans_1 <- emmeans(mod_test, ~ DL | INUf)
> pairs(emmeans_1)
INUf = 0:
 contrast     estimate    SE df t.ratio p.value
 FALSE - TRUE    -6.92 0.375 40 -18.445  <.0001

INUf = 10:
 contrast     estimate    SE df t.ratio p.value
 FALSE - TRUE    -7.76 0.375 40 -20.682  <.0001

INUf = 20:
 contrast     estimate    SE df t.ratio p.value
 FALSE - TRUE    -7.27 0.375 40 -19.352  <.0001

Degrees-of-freedom method: kenward-roger 
> xtable::xtable(pairs(emmeans_1))
% latex table generated in R 4.2.1 by xtable 1.8-4 package
% Sun Jul 24 06:17:50 2022
\begin{table}[ht]
\centering
\begin{tabular}{lrrrrl}
  \hline
contrast & estimate & SE & df & t.ratio & p.value \\ 
  \hline
\multicolumn{6}{l}{INUf = 0}\\
FALSE - TRUE & -6.9250 & 0.3754 & 40 & -18.445 & $<$.0001 \\ 
   \hline
\multicolumn{6}{l}{INUf = 10}\\
FALSE - TRUE & -7.7650 & 0.3754 & 40 & -20.682 & $<$.0001 \\ 
   \hline
\multicolumn{6}{l}{INUf = 20}\\
FALSE - TRUE & -7.2655 & 0.3754 & 40 & -19.352 & $<$.0001 \\ 
   \hline
\multicolumn{6}{l}{{\footnotesize Degrees-of-freedom method: kenward-roger}}\\
\end{tabular}
\end{table}
> 
> library(ggResidpanel)
> resid_panel(mod_test)
> 
> 
> library(qqplotr)

Attaching package: ‘qqplotr’

The following objects are masked from ‘package:ggplot2’:

    stat_qq_line, StatQqLine

> type = "response"
> model = mod_test
> model_values <- data.frame(Residual = ggResidpanel:::helper_resid(type = "response", model = mod_test))
> r_label <- ggResidpanel:::helper_label(type, model)
> data_add <- ggResidpanel:::helper_plotly_label(model)
> model_values <- cbind(model_values, data_add)
> names(model_values)[which(names(model_values) == "data_add")] <- "Data"
> model_values <- model_values[order(model_values$Residual), ]
> plot <- ggplot(data = model_values, mapping = aes_string(sample = "Residual", 
+     label = "Data")) + stat_qq_point() + labs(x = "Theoretical Quantiles", 
+     y = "Sample Quantiles")
> plot_data <- ggplot_build(plot)
> model_values$Theoretical <- plot_data[[1]][[1]]$theoretical
> model_values$Residual_Plot <- model_values$Residual
> 
> 
> p_SSIM <- ggplot(data = model_values, mapping = aes_string(sample = "Residual_Plot", 
+     label = "Data")) + stat_qq_point() + 
+     labs(x = "Theoretical Quantiles", y = "Sample Quantiles") + 
+     stat_qq_line(color = "blue", size = 0.5) + 
+     theme_minimal() + theme(panel.background = element_rect(fill = "white", colour = "white", size = 0.5, linetype = "solid"), 
+                                 plot.background = element_rect(fill = "white"),
+                                 axis.text = element_text(size = 15),
+                                 axis.title = element_text(size = 20))
> 
> p_SSIM_band <- ggplot(data = model_values, mapping = aes_string(sample = "Residual_Plot", 
+     label = "Data")) + stat_qq_band() + stat_qq_point() + 
+     labs(x = "Theoretical Quantiles", y = "Sample Quantiles") + 
+     stat_qq_line(color = "blue", size = 0.5) + 
+     theme_minimal() + theme(panel.background = element_rect(fill = "white", colour = "white", size = 0.5, linetype = "solid"), 
+                                 plot.background = element_rect(fill = "white"),
+                                 axis.text = element_text(size = 15),
+                                 axis.title = element_text(size = 20))
> 
> p_SSIM
> p_SSIM_band
> 
> 
> 
> 
> 
> 
> 
> 
> 
> tmp_dat <- all_dat %>%
+     filter(measures == "MAPE") %>%
+     filter(method == "MLE") %>%
+     pivot_longer(!c(DL, measures, INU, method), names_to = "img", values_to = "vals") 
> 
> 
> tmp_dat$INUf <- factor(tmp_dat$INU)
> (mod_test <- lmer(vals ~ DL * INUf + (1 | img), tmp_dat))   # random effect for intercept
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * INUf + (1 | img)
   Data: tmp_dat
REML criterion at convergence: -225.8624
Random effects:
 Groups   Name        Std.Dev.
 img      (Intercept) 0.03178 
 Residual             0.01524 
Number of obs: 54, groups:  img, 9
Fixed Effects:
  (Intercept)         DLTRUE         INUf10         INUf20  DLTRUE:INUf10  
      0.13791       -0.05141        0.02670        0.05094       -0.01021  
DLTRUE:INUf20  
      0.01054  
> 
> library(emmeans)
> emmeans_1 <- emmeans(mod_test, ~ DL | INUf)
> pairs(emmeans_1)
INUf = 0:
 contrast     estimate      SE df t.ratio p.value
 FALSE - TRUE   0.0514 0.00718 40   7.157  <.0001

INUf = 10:
 contrast     estimate      SE df t.ratio p.value
 FALSE - TRUE   0.0616 0.00718 40   8.578  <.0001

INUf = 20:
 contrast     estimate      SE df t.ratio p.value
 FALSE - TRUE   0.0409 0.00718 40   5.689  <.0001

Degrees-of-freedom method: kenward-roger 
> xtable::xtable(pairs(emmeans_1))
% latex table generated in R 4.2.1 by xtable 1.8-4 package
% Sun Jul 24 06:17:52 2022
\begin{table}[ht]
\centering
\begin{tabular}{lrrrrl}
  \hline
contrast & estimate & SE & df & t.ratio & p.value \\ 
  \hline
\multicolumn{6}{l}{INUf = 0}\\
FALSE - TRUE & 0.0514 & 0.0072 & 40 & 7.157 & $<$.0001 \\ 
   \hline
\multicolumn{6}{l}{INUf = 10}\\
FALSE - TRUE & 0.0616 & 0.0072 & 40 & 8.578 & $<$.0001 \\ 
   \hline
\multicolumn{6}{l}{INUf = 20}\\
FALSE - TRUE & 0.0409 & 0.0072 & 40 & 5.689 & $<$.0001 \\ 
   \hline
\multicolumn{6}{l}{{\footnotesize Degrees-of-freedom method: kenward-roger}}\\
\end{tabular}
\end{table}
> 
> library(ggResidpanel)
> resid_panel(mod_test)
> 
> 
> library(qqplotr)
> type = "response"
> model = mod_test
> model_values <- data.frame(Residual = ggResidpanel:::helper_resid(type = "response", model = mod_test))
> r_label <- ggResidpanel:::helper_label(type, model)
> data_add <- ggResidpanel:::helper_plotly_label(model)
> model_values <- cbind(model_values, data_add)
> names(model_values)[which(names(model_values) == "data_add")] <- "Data"
> model_values <- model_values[order(model_values$Residual), ]
> plot <- ggplot(data = model_values, mapping = aes_string(sample = "Residual", 
+     label = "Data")) + stat_qq_point() + labs(x = "Theoretical Quantiles", 
+     y = "Sample Quantiles")
> plot_data <- ggplot_build(plot)
> model_values$Theoretical <- plot_data[[1]][[1]]$theoretical
> model_values$Residual_Plot <- model_values$Residual
> 
> 
> p_MAPE <- ggplot(data = model_values, mapping = aes_string(sample = "Residual_Plot", 
+     label = "Data")) + stat_qq_point() + 
+     labs(x = "Theoretical Quantiles", y = "Sample Quantiles") + 
+     stat_qq_line(color = "blue", size = 0.5) + 
+     theme_minimal() + theme(panel.background = element_rect(fill = "white", colour = "white", size = 0.5, linetype = "solid"), 
+                                 plot.background = element_rect(fill = "white"),
+                                 axis.text = element_text(size = 15),
+                                 axis.title = element_text(size = 20))
> 
> p_MAPE_band <- ggplot(data = model_values, mapping = aes_string(sample = "Residual_Plot", 
+     label = "Data")) + stat_qq_band() + stat_qq_point() + 
+     labs(x = "Theoretical Quantiles", y = "Sample Quantiles") + 
+     stat_qq_line(color = "blue", size = 0.5) + 
+     theme_minimal() + theme(panel.background = element_rect(fill = "white", colour = "white", size = 0.5, linetype = "solid"), 
+                                 plot.background = element_rect(fill = "white"),
+                                 axis.text = element_text(size = 15),
+                                 axis.title = element_text(size = 20))
> 
> p_MAPE
> p_MAPE_band
> 
> 
> 
> 
> 
> tmp_dat <- all_dat %>%
+     filter(measures == "RMSPE") %>%
+     filter(method == "MLE") %>%
+     pivot_longer(!c(DL, measures, INU, method), names_to = "img", values_to = "vals") 
> 
> 
> tmp_dat$INUf <- factor(tmp_dat$INU)
> (mod_test <- lmer(vals ~ DL * INUf + (1 | img), tmp_dat))   # random effect for intercept
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * INUf + (1 | img)
   Data: tmp_dat
REML criterion at convergence: -210.0701
Random effects:
 Groups   Name        Std.Dev.
 img      (Intercept) 0.04823 
 Residual             0.01711 
Number of obs: 54, groups:  img, 9
Fixed Effects:
  (Intercept)         DLTRUE         INUf10         INUf20  DLTRUE:INUf10  
      0.25563       -0.09131        0.03937        0.07900       -0.01522  
DLTRUE:INUf20  
      0.01682  
> 
> library(emmeans)
> emmeans_1 <- emmeans(mod_test, ~ DL | INUf)
> pairs(emmeans_1)
INUf = 0:
 contrast     estimate      SE df t.ratio p.value
 FALSE - TRUE   0.0913 0.00806 40  11.323  <.0001

INUf = 10:
 contrast     estimate      SE df t.ratio p.value
 FALSE - TRUE   0.1065 0.00806 40  13.211  <.0001

INUf = 20:
 contrast     estimate      SE df t.ratio p.value
 FALSE - TRUE   0.0745 0.00806 40   9.238  <.0001

Degrees-of-freedom method: kenward-roger 
> xtable::xtable(pairs(emmeans_1))
% latex table generated in R 4.2.1 by xtable 1.8-4 package
% Sun Jul 24 06:17:52 2022
\begin{table}[ht]
\centering
\begin{tabular}{lrrrrl}
  \hline
contrast & estimate & SE & df & t.ratio & p.value \\ 
  \hline
\multicolumn{6}{l}{INUf = 0}\\
FALSE - TRUE & 0.0913 & 0.0081 & 40 & 11.323 & $<$.0001 \\ 
   \hline
\multicolumn{6}{l}{INUf = 10}\\
FALSE - TRUE & 0.1065 & 0.0081 & 40 & 13.211 & $<$.0001 \\ 
   \hline
\multicolumn{6}{l}{INUf = 20}\\
FALSE - TRUE & 0.0745 & 0.0081 & 40 & 9.238 & $<$.0001 \\ 
   \hline
\multicolumn{6}{l}{{\footnotesize Degrees-of-freedom method: kenward-roger}}\\
\end{tabular}
\end{table}
> 
> library(ggResidpanel)
> resid_panel(mod_test)
> 
> 
> library(qqplotr)
> type = "response"
> model = mod_test
> model_values <- data.frame(Residual = ggResidpanel:::helper_resid(type = "response", model = mod_test))
> r_label <- ggResidpanel:::helper_label(type, model)
> data_add <- ggResidpanel:::helper_plotly_label(model)
> model_values <- cbind(model_values, data_add)
> names(model_values)[which(names(model_values) == "data_add")] <- "Data"
> model_values <- model_values[order(model_values$Residual), ]
> plot <- ggplot(data = model_values, mapping = aes_string(sample = "Residual", 
+     label = "Data")) + stat_qq_point() + labs(x = "Theoretical Quantiles", 
+     y = "Sample Quantiles")
> plot_data <- ggplot_build(plot)
> model_values$Theoretical <- plot_data[[1]][[1]]$theoretical
> model_values$Residual_Plot <- model_values$Residual
> 
> 
> p_RMSPE <- ggplot(data = model_values, mapping = aes_string(sample = "Residual_Plot", 
+     label = "Data")) + stat_qq_point() + 
+     labs(x = "Theoretical Quantiles", y = "Sample Quantiles") + 
+     stat_qq_line(color = "blue", size = 0.5) + 
+     theme_minimal() + theme(panel.background = element_rect(fill = "white", colour = "white", size = 0.5, linetype = "solid"), 
+                                 plot.background = element_rect(fill = "white"),
+                                 axis.text = element_text(size = 15),
+                                 axis.title = element_text(size = 20))
> 
> p_RMSPE_band <- ggplot(data = model_values, mapping = aes_string(sample = "Residual_Plot", 
+     label = "Data")) + stat_qq_band() + stat_qq_point() + 
+     labs(x = "Theoretical Quantiles", y = "Sample Quantiles") + 
+     stat_qq_line(color = "blue", size = 0.5) + 
+     theme_minimal() + theme(panel.background = element_rect(fill = "white", colour = "white", size = 0.5, linetype = "solid"), 
+                                 plot.background = element_rect(fill = "white"),
+                                 axis.text = element_text(size = 15),
+                                 axis.title = element_text(size = 20))
> 
> p_RMSPE
> p_RMSPE_band
> 
> 
> 
> 
> 
> pdf('qqplots-FLASH-INU.pdf')
> p_MAPE_band
> p_RMSPE_band
> p_SSIM_band
> 
> p_MAPE
> p_RMSPE
> p_SSIM
> 
> dev.off()
pdf 
  2 
> 
> 
> system("pdfcrop qqplots-FLASH-INU.pdf")
PDFCROP 1.40, 2020/06/06 - Copyright (c) 2002-2020 by Heiko Oberdiek, Oberdiek Package Support Group.
==> 6 pages written on `qqplots-FLASH-INU-crop.pdf'.
> 
> 
> 
> 
> 
> 
> proc.time()
   user  system elapsed 
  5.647   0.193   5.858 
