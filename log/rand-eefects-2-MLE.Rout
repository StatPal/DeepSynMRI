
R version 4.2.1 (2022-06-23) -- "Funny-Looking Kid"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> noise_vec <- c(1, 2.5, 5, 7.5, 10)
> all_normal <- c()
> all_DL     <- c()
> 
> for(i in 1:5){
+     f1 <- paste0("values/pred-noise-", noise_vec[i], "-INU-00.csv")
+     f2 <- paste0("values/DL-pred-noise-", noise_vec[i], "-INU-00.csv")
+ 
+     all_normal <- rbind(all_normal, as.matrix(read.csv(f1, header = F))[c(6,7,3, 13,14,10), ])  # to take only the normalized? versions c(4,5,3, 9,10,8)
+     all_DL     <- rbind(all_DL    , as.matrix(read.csv(f2, header = F))[c(6,7,3, 13,14,10), ])
+ }
> 
> all_normal <- data.frame(all_normal)
> all_DL <- data.frame(all_DL)
> 
> method <- rep(c("LS", "MLE"), each=3, times=5)
> measures <- rep(c("MAPE", "RMSPE", "SSIM"), 5 * 2)
> errs <- rep(c(1, 2.5, 5, 7.5, 10), each = 3 * 2)
> DL <- rep(c(F, T), each = 5 * 3 * 2)
> 
> all_normal <- cbind(measures, errs, method, all_normal)
> all_DL     <- cbind(measures, errs, method, all_DL    )
> 
> all_dat <- cbind(DL, rbind(all_normal, all_DL))
> 
> rm(DL)
> rm(measures)
> rm(errs)
> 
> 
> library(tidyverse)
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──
✔ ggplot2 3.3.5     ✔ purrr   0.3.4
✔ tibble  3.1.6     ✔ dplyr   1.0.7
✔ tidyr   1.1.4     ✔ stringr 1.4.0
✔ readr   2.1.1     ✔ forcats 0.5.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
> tmp_dat <- all_dat %>%
+     filter(measures == "MAPE") %>%
+     filter(method == "MLE") %>%
+     pivot_longer(!c(DL, measures, errs, method), names_to = "img", values_to = "vals") 
> 
> 
> library(lme4)
Loading required package: Matrix

Attaching package: ‘Matrix’

The following objects are masked from ‘package:tidyr’:

    expand, pack, unpack

> mod1 <- lmer(vals ~ DL + (DL | img), tmp_dat)
boundary (singular) fit: see help('isSingular')
> mod1
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL + (DL | img)
   Data: tmp_dat
REML criterion at convergence: -142.7848
Random effects:
 Groups   Name        Std.Dev.  Corr
 img      (Intercept) 0.000e+00     
          DLTRUE      3.405e-13  NaN
 Residual             1.030e-01     
Number of obs: 90, groups:  img, 9
Fixed Effects:
(Intercept)       DLTRUE  
    0.22413     -0.06642  
optimizer (nloptwrap) convergence code: 0 (OK) ; 0 optimizer warnings; 1 lme4 warnings 
> 
> 
> ## Random effects model to the real data
> ggplot(tmp_dat) + 
+     aes(x = DL, y = vals, group = errs, shape=method, color=factor(errs), linetype = factor(errs)) +
+     geom_point(aes(size=1)) + 
+     facet_grid(cols = vars(img)) +
+     geom_line()
> 
> 
> tmp_dat$errf <- factor(tmp_dat$errs)
> 
> (mod_test <- lmer(vals ~ DL * errf + (1 | img), tmp_dat))   # random effect for intercept   # make new column, errf
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errf + (1 | img)
   Data: tmp_dat
REML criterion at convergence: -332.892
Random effects:
 Groups   Name        Std.Dev.
 img      (Intercept) 0.02192 
 Residual             0.02351 
Number of obs: 90, groups:  img, 9
Fixed Effects:
   (Intercept)          DLTRUE         errf2.5           errf5         errf7.5  
       0.07318         0.02173         0.04845         0.14198         0.23976  
        errf10  DLTRUE:errf2.5    DLTRUE:errf5  DLTRUE:errf7.5   DLTRUE:errf10  
       0.32457        -0.04848        -0.09915        -0.14976        -0.14337  
> 
> library(emmeans)
> emmeans_1 <- emmeans(mod_test, ~ DL | errf)
> pairs(emmeans_1)
errf = 1:
 contrast     estimate     SE df t.ratio p.value
 FALSE - TRUE  -0.0217 0.0111 72  -1.961  0.0537

errf = 2.5:
 contrast     estimate     SE df t.ratio p.value
 FALSE - TRUE   0.0268 0.0111 72   2.414  0.0183

errf = 5:
 contrast     estimate     SE df t.ratio p.value
 FALSE - TRUE   0.0774 0.0111 72   6.986  <.0001

errf = 7.5:
 contrast     estimate     SE df t.ratio p.value
 FALSE - TRUE   0.1280 0.0111 72  11.553  <.0001

errf = 10:
 contrast     estimate     SE df t.ratio p.value
 FALSE - TRUE   0.1216 0.0111 72  10.976  <.0001

Degrees-of-freedom method: kenward-roger 
> xtable::xtable(pairs(emmeans_1))
% latex table generated in R 4.2.1 by xtable 1.8-4 package
% Sun Jul 24 06:18:34 2022
\begin{table}[ht]
\centering
\begin{tabular}{lrrrrl}
  \hline
contrast & estimate & SE & df & t.ratio & p.value \\ 
  \hline
\multicolumn{6}{l}{errf = 1}\\
FALSE - TRUE & -0.0217 & 0.0111 & 72 & -1.961 & 0.0537 \\ 
   \hline
\multicolumn{6}{l}{errf = 2.5}\\
FALSE - TRUE & 0.0268 & 0.0111 & 72 & 2.414 & 0.0183 \\ 
   \hline
\multicolumn{6}{l}{errf = 5}\\
FALSE - TRUE & 0.0774 & 0.0111 & 72 & 6.986 & $<$.0001 \\ 
   \hline
\multicolumn{6}{l}{errf = 7.5}\\
FALSE - TRUE & 0.1280 & 0.0111 & 72 & 11.553 & $<$.0001 \\ 
   \hline
\multicolumn{6}{l}{errf = 10}\\
FALSE - TRUE & 0.1216 & 0.0111 & 72 & 10.976 & $<$.0001 \\ 
   \hline
\multicolumn{6}{l}{{\footnotesize Degrees-of-freedom method: kenward-roger}}\\
\end{tabular}
\end{table}
> 
> library(ggResidpanel)
> resid_panel(mod_test)
> resid_panel(mod_test, type='response')
> # resid_panel(mod_test, type='standardized')
> 
> p_MAPE <- resid_panel(mod_test, type='response', plots = "qq") + 
+     theme_minimal() + theme(panel.background = element_rect(fill = "white", colour = "white", size = 0.5, linetype = "solid"), 
+                                 plot.background = element_rect(fill = "white"),
+                                 axis.text=element_text(size=40),
+         axis.title=element_text(size=20,face="bold"))
> 
> p_MAPE
> 
> 
> library(qqplotr)

Attaching package: ‘qqplotr’

The following objects are masked from ‘package:ggplot2’:

    stat_qq_line, StatQqLine

> qq <- ggResidpanel:::plot_qq(model = mod_test, type = "response", theme = "bw", 
+             axis.text.size = 10, title.text.size = 20, 
+             title.opt = 'Q-Q Plot', qqline = T, qqbands = T)
> 
> 
> 
> type = "response"
> model = mod_test
> model_values <- data.frame(Residual = ggResidpanel:::helper_resid(type = "response", model = mod_test))
> r_label <- ggResidpanel:::helper_label(type, model)
> data_add <- ggResidpanel:::helper_plotly_label(model)
> model_values <- cbind(model_values, data_add)
> names(model_values)[which(names(model_values) == "data_add")] <- "Data"
> model_values <- model_values[order(model_values$Residual), ]
> plot <- ggplot(data = model_values, mapping = aes_string(sample = "Residual", 
+     label = "Data")) + stat_qq_point() + labs(x = "Theoretical Quantiles", 
+     y = "Sample Quantiles")
> plot_data <- ggplot_build(plot)
> model_values$Theoretical <- plot_data[[1]][[1]]$theoretical
> model_values$Residual_Plot <- model_values$Residual
> 
> 
> # plot <- ggplot(data = model_values, mapping = aes_string(sample = "Residual_Plot", 
> #     label = "Data")) + stat_qq_point() + geom_point(mapping = aes_string(x = "Theoretical", 
> #     y = "Residual")) + labs(x = "Theoretical Quantiles", 
> #     y = "Sample Quantiles")
> 
> p_MAPE <- ggplot(data = model_values, mapping = aes_string(sample = "Residual_Plot", 
+     label = "Data")) + stat_qq_point() + 
+     labs(x = "Theoretical Quantiles", y = "Sample Quantiles") + 
+     stat_qq_line(color = "blue", size = 0.5) + 
+     theme_minimal() + theme(panel.background = element_rect(fill = "white", colour = "white", size = 0.5, linetype = "solid"), 
+                                 plot.background = element_rect(fill = "white"),
+                                 axis.text = element_text(size = 15),
+                                 axis.title = element_text(size = 20))
> 
> p_MAPE_band <- ggplot(data = model_values, mapping = aes_string(sample = "Residual_Plot", 
+     label = "Data")) + stat_qq_band() + stat_qq_point() + 
+     labs(x = "Theoretical Quantiles", y = "Sample Quantiles") + 
+     stat_qq_line(color = "blue", size = 0.5) + 
+     theme_minimal() + theme(panel.background = element_rect(fill = "white", colour = "white", size = 0.5, linetype = "solid"), 
+                                 plot.background = element_rect(fill = "white"),
+                                 # plot.title = element_text(size = 10, face = "bold"), 
+                                 axis.text = element_text(size = 15),
+                                 axis.title = element_text(size = 20))
> 
> p_MAPE
> p_MAPE_band
> 
> 
> 
> (design_X <- getME(mod_test, "X"))
   (Intercept) DLTRUE errf2.5 errf5 errf7.5 errf10 DLTRUE:errf2.5 DLTRUE:errf5
1            1      0       0     0       0      0              0            0
2            1      0       0     0       0      0              0            0
3            1      0       0     0       0      0              0            0
4            1      0       0     0       0      0              0            0
5            1      0       0     0       0      0              0            0
6            1      0       0     0       0      0              0            0
7            1      0       0     0       0      0              0            0
8            1      0       0     0       0      0              0            0
9            1      0       0     0       0      0              0            0
10           1      0       1     0       0      0              0            0
11           1      0       1     0       0      0              0            0
12           1      0       1     0       0      0              0            0
13           1      0       1     0       0      0              0            0
14           1      0       1     0       0      0              0            0
15           1      0       1     0       0      0              0            0
16           1      0       1     0       0      0              0            0
17           1      0       1     0       0      0              0            0
18           1      0       1     0       0      0              0            0
19           1      0       0     1       0      0              0            0
20           1      0       0     1       0      0              0            0
21           1      0       0     1       0      0              0            0
22           1      0       0     1       0      0              0            0
23           1      0       0     1       0      0              0            0
24           1      0       0     1       0      0              0            0
25           1      0       0     1       0      0              0            0
26           1      0       0     1       0      0              0            0
27           1      0       0     1       0      0              0            0
28           1      0       0     0       1      0              0            0
29           1      0       0     0       1      0              0            0
30           1      0       0     0       1      0              0            0
31           1      0       0     0       1      0              0            0
32           1      0       0     0       1      0              0            0
33           1      0       0     0       1      0              0            0
34           1      0       0     0       1      0              0            0
35           1      0       0     0       1      0              0            0
36           1      0       0     0       1      0              0            0
37           1      0       0     0       0      1              0            0
38           1      0       0     0       0      1              0            0
39           1      0       0     0       0      1              0            0
40           1      0       0     0       0      1              0            0
41           1      0       0     0       0      1              0            0
42           1      0       0     0       0      1              0            0
43           1      0       0     0       0      1              0            0
44           1      0       0     0       0      1              0            0
45           1      0       0     0       0      1              0            0
46           1      1       0     0       0      0              0            0
47           1      1       0     0       0      0              0            0
48           1      1       0     0       0      0              0            0
49           1      1       0     0       0      0              0            0
50           1      1       0     0       0      0              0            0
51           1      1       0     0       0      0              0            0
52           1      1       0     0       0      0              0            0
53           1      1       0     0       0      0              0            0
54           1      1       0     0       0      0              0            0
55           1      1       1     0       0      0              1            0
56           1      1       1     0       0      0              1            0
57           1      1       1     0       0      0              1            0
58           1      1       1     0       0      0              1            0
59           1      1       1     0       0      0              1            0
60           1      1       1     0       0      0              1            0
61           1      1       1     0       0      0              1            0
62           1      1       1     0       0      0              1            0
63           1      1       1     0       0      0              1            0
64           1      1       0     1       0      0              0            1
65           1      1       0     1       0      0              0            1
66           1      1       0     1       0      0              0            1
67           1      1       0     1       0      0              0            1
68           1      1       0     1       0      0              0            1
69           1      1       0     1       0      0              0            1
70           1      1       0     1       0      0              0            1
71           1      1       0     1       0      0              0            1
72           1      1       0     1       0      0              0            1
73           1      1       0     0       1      0              0            0
74           1      1       0     0       1      0              0            0
75           1      1       0     0       1      0              0            0
76           1      1       0     0       1      0              0            0
77           1      1       0     0       1      0              0            0
78           1      1       0     0       1      0              0            0
79           1      1       0     0       1      0              0            0
80           1      1       0     0       1      0              0            0
81           1      1       0     0       1      0              0            0
82           1      1       0     0       0      1              0            0
83           1      1       0     0       0      1              0            0
84           1      1       0     0       0      1              0            0
85           1      1       0     0       0      1              0            0
86           1      1       0     0       0      1              0            0
87           1      1       0     0       0      1              0            0
88           1      1       0     0       0      1              0            0
89           1      1       0     0       0      1              0            0
90           1      1       0     0       0      1              0            0
   DLTRUE:errf7.5 DLTRUE:errf10
1               0             0
2               0             0
3               0             0
4               0             0
5               0             0
6               0             0
7               0             0
8               0             0
9               0             0
10              0             0
11              0             0
12              0             0
13              0             0
14              0             0
15              0             0
16              0             0
17              0             0
18              0             0
19              0             0
20              0             0
21              0             0
22              0             0
23              0             0
24              0             0
25              0             0
26              0             0
27              0             0
28              0             0
29              0             0
30              0             0
31              0             0
32              0             0
33              0             0
34              0             0
35              0             0
36              0             0
37              0             0
38              0             0
39              0             0
40              0             0
41              0             0
42              0             0
43              0             0
44              0             0
45              0             0
46              0             0
47              0             0
48              0             0
49              0             0
50              0             0
51              0             0
52              0             0
53              0             0
54              0             0
55              0             0
56              0             0
57              0             0
58              0             0
59              0             0
60              0             0
61              0             0
62              0             0
63              0             0
64              0             0
65              0             0
66              0             0
67              0             0
68              0             0
69              0             0
70              0             0
71              0             0
72              0             0
73              1             0
74              1             0
75              1             0
76              1             0
77              1             0
78              1             0
79              1             0
80              1             0
81              1             0
82              0             1
83              0             1
84              0             1
85              0             1
86              0             1
87              0             1
88              0             1
89              0             1
90              0             1
attr(,"assign")
 [1] 0 1 2 2 2 2 3 3 3 3
attr(,"contrasts")
attr(,"contrasts")$DL
[1] "contr.treatment"

attr(,"contrasts")$errf
[1] "contr.treatment"

attr(,"msgScaleX")
character(0)
> design_X %*% t(design_X)
   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28
1  1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
2  1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
3  1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
4  1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
5  1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
6  1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
7  1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
8  1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
9  1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
10 1 1 1 1 1 1 1 1 1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1
11 1 1 1 1 1 1 1 1 1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1
12 1 1 1 1 1 1 1 1 1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1
13 1 1 1 1 1 1 1 1 1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1
14 1 1 1 1 1 1 1 1 1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1
15 1 1 1 1 1 1 1 1 1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1
16 1 1 1 1 1 1 1 1 1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1
17 1 1 1 1 1 1 1 1 1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1
18 1 1 1 1 1 1 1 1 1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1
19 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1
20 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1
21 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1
22 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1
23 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1
24 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1
25 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1
26 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1
27 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1
28 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2
29 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2
30 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2
31 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2
32 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2
33 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2
34 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2
35 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2
36 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2
37 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
38 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
39 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
40 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
41 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
42 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
43 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
44 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
45 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
46 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
47 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
48 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
49 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
50 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
51 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
52 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
53 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
54 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
55 1 1 1 1 1 1 1 1 1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1
56 1 1 1 1 1 1 1 1 1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1
57 1 1 1 1 1 1 1 1 1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1
58 1 1 1 1 1 1 1 1 1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1
59 1 1 1 1 1 1 1 1 1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1
60 1 1 1 1 1 1 1 1 1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1
61 1 1 1 1 1 1 1 1 1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1
62 1 1 1 1 1 1 1 1 1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1
63 1 1 1 1 1 1 1 1 1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1
64 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1
65 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1
66 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1
67 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1
68 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1
69 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1
70 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1
71 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1
72 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1
73 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2
74 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2
75 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2
76 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2
77 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2
78 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2
79 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2
80 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2
81 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2
82 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
83 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
84 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
85 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
86 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
87 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
88 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
89 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
90 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
   29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53
1   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
2   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
3   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
4   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
5   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
6   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
7   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
8   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
9   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
10  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
11  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
12  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
13  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
14  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
15  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
16  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
17  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
18  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
19  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
20  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
21  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
22  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
23  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
24  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
25  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
26  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
27  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
28  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
29  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
30  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
31  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
32  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
33  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
34  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
35  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
36  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
37  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1
38  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1
39  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1
40  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1
41  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1
42  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1
43  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1
44  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1
45  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1
46  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
47  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
48  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
49  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
50  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
51  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
52  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
53  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
54  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
55  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
56  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
57  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
58  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
59  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
60  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
61  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
62  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
63  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
64  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
65  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
66  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
67  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
68  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
69  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
70  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
71  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
72  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
73  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
74  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
75  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
76  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
77  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
78  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
79  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
80  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
81  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
82  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
83  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
84  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
85  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
86  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
87  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
88  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
89  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
90  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
   54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78
1   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
2   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
3   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
4   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
5   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
6   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
7   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
8   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
9   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
10  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
11  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
12  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
13  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
14  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
15  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
16  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
17  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
18  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
19  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1
20  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1
21  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1
22  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1
23  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1
24  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1
25  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1
26  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1
27  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1
28  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2
29  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2
30  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2
31  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2
32  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2
33  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2
34  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2
35  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2
36  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2
37  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
38  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
39  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
40  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
41  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
42  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
43  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
44  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
45  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
46  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
47  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
48  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
49  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
50  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
51  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
52  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
53  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
54  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
55  2  4  4  4  4  4  4  4  4  4  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
56  2  4  4  4  4  4  4  4  4  4  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
57  2  4  4  4  4  4  4  4  4  4  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
58  2  4  4  4  4  4  4  4  4  4  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
59  2  4  4  4  4  4  4  4  4  4  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
60  2  4  4  4  4  4  4  4  4  4  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
61  2  4  4  4  4  4  4  4  4  4  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
62  2  4  4  4  4  4  4  4  4  4  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
63  2  4  4  4  4  4  4  4  4  4  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
64  2  2  2  2  2  2  2  2  2  2  4  4  4  4  4  4  4  4  4  2  2  2  2  2  2
65  2  2  2  2  2  2  2  2  2  2  4  4  4  4  4  4  4  4  4  2  2  2  2  2  2
66  2  2  2  2  2  2  2  2  2  2  4  4  4  4  4  4  4  4  4  2  2  2  2  2  2
67  2  2  2  2  2  2  2  2  2  2  4  4  4  4  4  4  4  4  4  2  2  2  2  2  2
68  2  2  2  2  2  2  2  2  2  2  4  4  4  4  4  4  4  4  4  2  2  2  2  2  2
69  2  2  2  2  2  2  2  2  2  2  4  4  4  4  4  4  4  4  4  2  2  2  2  2  2
70  2  2  2  2  2  2  2  2  2  2  4  4  4  4  4  4  4  4  4  2  2  2  2  2  2
71  2  2  2  2  2  2  2  2  2  2  4  4  4  4  4  4  4  4  4  2  2  2  2  2  2
72  2  2  2  2  2  2  2  2  2  2  4  4  4  4  4  4  4  4  4  2  2  2  2  2  2
73  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  4  4  4  4  4  4
74  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  4  4  4  4  4  4
75  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  4  4  4  4  4  4
76  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  4  4  4  4  4  4
77  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  4  4  4  4  4  4
78  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  4  4  4  4  4  4
79  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  4  4  4  4  4  4
80  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  4  4  4  4  4  4
81  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  4  4  4  4  4  4
82  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
83  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
84  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
85  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
86  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
87  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
88  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
89  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
90  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
   79 80 81 82 83 84 85 86 87 88 89 90
1   1  1  1  1  1  1  1  1  1  1  1  1
2   1  1  1  1  1  1  1  1  1  1  1  1
3   1  1  1  1  1  1  1  1  1  1  1  1
4   1  1  1  1  1  1  1  1  1  1  1  1
5   1  1  1  1  1  1  1  1  1  1  1  1
6   1  1  1  1  1  1  1  1  1  1  1  1
7   1  1  1  1  1  1  1  1  1  1  1  1
8   1  1  1  1  1  1  1  1  1  1  1  1
9   1  1  1  1  1  1  1  1  1  1  1  1
10  1  1  1  1  1  1  1  1  1  1  1  1
11  1  1  1  1  1  1  1  1  1  1  1  1
12  1  1  1  1  1  1  1  1  1  1  1  1
13  1  1  1  1  1  1  1  1  1  1  1  1
14  1  1  1  1  1  1  1  1  1  1  1  1
15  1  1  1  1  1  1  1  1  1  1  1  1
16  1  1  1  1  1  1  1  1  1  1  1  1
17  1  1  1  1  1  1  1  1  1  1  1  1
18  1  1  1  1  1  1  1  1  1  1  1  1
19  1  1  1  1  1  1  1  1  1  1  1  1
20  1  1  1  1  1  1  1  1  1  1  1  1
21  1  1  1  1  1  1  1  1  1  1  1  1
22  1  1  1  1  1  1  1  1  1  1  1  1
23  1  1  1  1  1  1  1  1  1  1  1  1
24  1  1  1  1  1  1  1  1  1  1  1  1
25  1  1  1  1  1  1  1  1  1  1  1  1
26  1  1  1  1  1  1  1  1  1  1  1  1
27  1  1  1  1  1  1  1  1  1  1  1  1
28  2  2  2  1  1  1  1  1  1  1  1  1
29  2  2  2  1  1  1  1  1  1  1  1  1
30  2  2  2  1  1  1  1  1  1  1  1  1
31  2  2  2  1  1  1  1  1  1  1  1  1
32  2  2  2  1  1  1  1  1  1  1  1  1
33  2  2  2  1  1  1  1  1  1  1  1  1
34  2  2  2  1  1  1  1  1  1  1  1  1
35  2  2  2  1  1  1  1  1  1  1  1  1
36  2  2  2  1  1  1  1  1  1  1  1  1
37  1  1  1  2  2  2  2  2  2  2  2  2
38  1  1  1  2  2  2  2  2  2  2  2  2
39  1  1  1  2  2  2  2  2  2  2  2  2
40  1  1  1  2  2  2  2  2  2  2  2  2
41  1  1  1  2  2  2  2  2  2  2  2  2
42  1  1  1  2  2  2  2  2  2  2  2  2
43  1  1  1  2  2  2  2  2  2  2  2  2
44  1  1  1  2  2  2  2  2  2  2  2  2
45  1  1  1  2  2  2  2  2  2  2  2  2
46  2  2  2  2  2  2  2  2  2  2  2  2
47  2  2  2  2  2  2  2  2  2  2  2  2
48  2  2  2  2  2  2  2  2  2  2  2  2
49  2  2  2  2  2  2  2  2  2  2  2  2
50  2  2  2  2  2  2  2  2  2  2  2  2
51  2  2  2  2  2  2  2  2  2  2  2  2
52  2  2  2  2  2  2  2  2  2  2  2  2
53  2  2  2  2  2  2  2  2  2  2  2  2
54  2  2  2  2  2  2  2  2  2  2  2  2
55  2  2  2  2  2  2  2  2  2  2  2  2
56  2  2  2  2  2  2  2  2  2  2  2  2
57  2  2  2  2  2  2  2  2  2  2  2  2
58  2  2  2  2  2  2  2  2  2  2  2  2
59  2  2  2  2  2  2  2  2  2  2  2  2
60  2  2  2  2  2  2  2  2  2  2  2  2
61  2  2  2  2  2  2  2  2  2  2  2  2
62  2  2  2  2  2  2  2  2  2  2  2  2
63  2  2  2  2  2  2  2  2  2  2  2  2
64  2  2  2  2  2  2  2  2  2  2  2  2
65  2  2  2  2  2  2  2  2  2  2  2  2
66  2  2  2  2  2  2  2  2  2  2  2  2
67  2  2  2  2  2  2  2  2  2  2  2  2
68  2  2  2  2  2  2  2  2  2  2  2  2
69  2  2  2  2  2  2  2  2  2  2  2  2
70  2  2  2  2  2  2  2  2  2  2  2  2
71  2  2  2  2  2  2  2  2  2  2  2  2
72  2  2  2  2  2  2  2  2  2  2  2  2
73  4  4  4  2  2  2  2  2  2  2  2  2
74  4  4  4  2  2  2  2  2  2  2  2  2
75  4  4  4  2  2  2  2  2  2  2  2  2
76  4  4  4  2  2  2  2  2  2  2  2  2
77  4  4  4  2  2  2  2  2  2  2  2  2
78  4  4  4  2  2  2  2  2  2  2  2  2
79  4  4  4  2  2  2  2  2  2  2  2  2
80  4  4  4  2  2  2  2  2  2  2  2  2
81  4  4  4  2  2  2  2  2  2  2  2  2
82  2  2  2  4  4  4  4  4  4  4  4  4
83  2  2  2  4  4  4  4  4  4  4  4  4
84  2  2  2  4  4  4  4  4  4  4  4  4
85  2  2  2  4  4  4  4  4  4  4  4  4
86  2  2  2  4  4  4  4  4  4  4  4  4
87  2  2  2  4  4  4  4  4  4  4  4  4
88  2  2  2  4  4  4  4  4  4  4  4  4
89  2  2  2  4  4  4  4  4  4  4  4  4
90  2  2  2  4  4  4  4  4  4  4  4  4
> 
> diag( design_X %*% solve(t(design_X) %*% design_X) %*% t(design_X) )
        1         2         3         4         5         6         7         8 
0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 
        9        10        11        12        13        14        15        16 
0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 
       17        18        19        20        21        22        23        24 
0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 
       25        26        27        28        29        30        31        32 
0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 
       33        34        35        36        37        38        39        40 
0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 
       41        42        43        44        45        46        47        48 
0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 
       49        50        51        52        53        54        55        56 
0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 
       57        58        59        60        61        62        63        64 
0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 
       65        66        67        68        69        70        71        72 
0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 
       73        74        75        76        77        78        79        80 
0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 
       81        82        83        84        85        86        87        88 
0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 
       89        90 
0.1111111 0.1111111 
> 
> summary(mod_test)
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errf + (1 | img)
   Data: tmp_dat

REML criterion at convergence: -332.9

Scaled residuals: 
    Min      1Q  Median      3Q     Max 
-1.9559 -0.6527  0.0188  0.5536  2.6468 

Random effects:
 Groups   Name        Variance  Std.Dev.
 img      (Intercept) 0.0004806 0.02192 
 Residual             0.0005526 0.02351 
Number of obs: 90, groups:  img, 9

Fixed effects:
               Estimate Std. Error t value
(Intercept)     0.07318    0.01071   6.830
DLTRUE          0.02173    0.01108   1.961
errf2.5         0.04845    0.01108   4.372
errf5           0.14198    0.01108  12.812
errf7.5         0.23976    0.01108  21.635
errf10          0.32457    0.01108  29.289
DLTRUE:errf2.5 -0.04848    0.01567  -3.094
DLTRUE:errf5   -0.09915    0.01567  -6.327
DLTRUE:errf7.5 -0.14976    0.01567  -9.556
DLTRUE:errf10  -0.14337    0.01567  -9.148

Correlation of Fixed Effects:
            (Intr) DLTRUE err2.5 errf5  err7.5 errf10 DLTRUE:2 DLTRUE:5
DLTRUE      -0.517                                                     
errf2.5     -0.517  0.500                                              
errf5       -0.517  0.500  0.500                                       
errf7.5     -0.517  0.500  0.500  0.500                                
errf10      -0.517  0.500  0.500  0.500  0.500                         
DLTRUE:r2.5  0.366 -0.707 -0.707 -0.354 -0.354 -0.354                  
DLTRUE:rrf5  0.366 -0.707 -0.354 -0.707 -0.354 -0.354  0.500           
DLTRUE:r7.5  0.366 -0.707 -0.354 -0.354 -0.707 -0.354  0.500    0.500  
DLTRUE:rr10  0.366 -0.707 -0.354 -0.354 -0.354 -0.707  0.500    0.500  
            DLTRUE:7
DLTRUE              
errf2.5             
errf5               
errf7.5             
errf10              
DLTRUE:r2.5         
DLTRUE:rrf5         
DLTRUE:r7.5         
DLTRUE:rr10  0.500  
> coef(mod_test)$img
   (Intercept)     DLTRUE    errf2.5     errf5  errf7.5   errf10 DLTRUE:errf2.5
V1  0.07621540 0.02173168 0.04844791 0.1419761 0.239756 0.324573    -0.04848491
V2  0.07012440 0.02173168 0.04844791 0.1419761 0.239756 0.324573    -0.04848491
V3  0.09315936 0.02173168 0.04844791 0.1419761 0.239756 0.324573    -0.04848491
V4  0.06481229 0.02173168 0.04844791 0.1419761 0.239756 0.324573    -0.04848491
V5  0.05954804 0.02173168 0.04844791 0.1419761 0.239756 0.324573    -0.04848491
V6  0.08884557 0.02173168 0.04844791 0.1419761 0.239756 0.324573    -0.04848491
V7  0.03653938 0.02173168 0.04844791 0.1419761 0.239756 0.324573    -0.04848491
V8  0.06318438 0.02173168 0.04844791 0.1419761 0.239756 0.324573    -0.04848491
V9  0.10614661 0.02173168 0.04844791 0.1419761 0.239756 0.324573    -0.04848491
   DLTRUE:errf5 DLTRUE:errf7.5 DLTRUE:errf10
V1  -0.09915223     -0.1497623    -0.1433657
V2  -0.09915223     -0.1497623    -0.1433657
V3  -0.09915223     -0.1497623    -0.1433657
V4  -0.09915223     -0.1497623    -0.1433657
V5  -0.09915223     -0.1497623    -0.1433657
V6  -0.09915223     -0.1497623    -0.1433657
V7  -0.09915223     -0.1497623    -0.1433657
V8  -0.09915223     -0.1497623    -0.1433657
V9  -0.09915223     -0.1497623    -0.1433657
> 
> 
> 
> 
> 
> (mod_test <- lmer(vals ~ DL * errf + (errf | img), tmp_dat))
boundary (singular) fit: see help('isSingular')
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errf + (errf | img)
   Data: tmp_dat
REML criterion at convergence: -391.6567
Random effects:
 Groups   Name        Std.Dev. Corr                   
 img      (Intercept) 0.026819                        
          errf2.5     0.004343 -1.00                  
          errf5       0.021066 -0.59  0.59            
          errf7.5     0.032763 -0.56  0.56  1.00      
          errf10      0.048793 -0.52  0.52  1.00  1.00
 Residual             0.013312                        
Number of obs: 90, groups:  img, 9
Fixed Effects:
   (Intercept)          DLTRUE         errf2.5           errf5         errf7.5  
       0.07318         0.02173         0.04845         0.14198         0.23976  
        errf10  DLTRUE:errf2.5    DLTRUE:errf5  DLTRUE:errf7.5   DLTRUE:errf10  
       0.32457        -0.04848        -0.09915        -0.14976        -0.14337  
optimizer (nloptwrap) convergence code: 0 (OK) ; 0 optimizer warnings; 1 lme4 warnings 
> emmeans_1 <- emmeans(mod_test, ~ DL | errf)
> pairs(emmeans_1)
errf = 1:
 contrast     estimate      SE df t.ratio p.value
 FALSE - TRUE  -0.0217 0.00628 40  -3.463  0.0013

errf = 2.5:
 contrast     estimate      SE df t.ratio p.value
 FALSE - TRUE   0.0268 0.00628 40   4.263  0.0001

errf = 5:
 contrast     estimate      SE df t.ratio p.value
 FALSE - TRUE   0.0774 0.00628 40  12.337  <.0001

errf = 7.5:
 contrast     estimate      SE df t.ratio p.value
 FALSE - TRUE   0.1280 0.00628 40  20.402  <.0001

errf = 10:
 contrast     estimate      SE df t.ratio p.value
 FALSE - TRUE   0.1216 0.00628 40  19.383  <.0001

Degrees-of-freedom method: kenward-roger 
> 
> summary(mod_test)
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errf + (errf | img)
   Data: tmp_dat

REML criterion at convergence: -391.7

Scaled residuals: 
     Min       1Q   Median       3Q      Max 
-2.70403 -0.59031 -0.06877  0.65379  2.86858 

Random effects:
 Groups   Name        Variance  Std.Dev. Corr                   
 img      (Intercept) 7.193e-04 0.026819                        
          errf2.5     1.886e-05 0.004343 -1.00                  
          errf5       4.438e-04 0.021066 -0.59  0.59            
          errf7.5     1.073e-03 0.032763 -0.56  0.56  1.00      
          errf10      2.381e-03 0.048793 -0.52  0.52  1.00  1.00
 Residual             1.772e-04 0.013312                        
Number of obs: 90, groups:  img, 9

Fixed effects:
                Estimate Std. Error t value
(Intercept)     0.073175   0.009980   7.332
DLTRUE          0.021732   0.006275   3.463
errf2.5         0.048448   0.006440   7.523
errf5           0.141976   0.009417  15.076
errf7.5         0.239756   0.012595  19.035
errf10          0.324573   0.017433  18.618
DLTRUE:errf2.5 -0.048485   0.008875  -5.463
DLTRUE:errf5   -0.099152   0.008875 -11.173
DLTRUE:errf7.5 -0.149762   0.008875 -16.875
DLTRUE:errf10  -0.143366   0.008875 -16.155

Correlation of Fixed Effects:
            (Intr) DLTRUE err2.5 errf5  err7.5 errf10 DLTRUE:2 DLTRUE:5
DLTRUE      -0.314                                                     
errf2.5     -0.508  0.487                                              
errf5       -0.602  0.333  0.423                                       
errf7.5     -0.589  0.249  0.351  0.812                                
errf10      -0.547  0.180  0.284  0.813  0.898                         
DLTRUE:r2.5  0.222 -0.707 -0.689 -0.236 -0.176 -0.127                  
DLTRUE:rrf5  0.222 -0.707 -0.345 -0.471 -0.176 -0.127  0.500           
DLTRUE:r7.5  0.222 -0.707 -0.345 -0.236 -0.352 -0.127  0.500    0.500  
DLTRUE:rr10  0.222 -0.707 -0.345 -0.236 -0.176 -0.255  0.500    0.500  
            DLTRUE:7
DLTRUE              
errf2.5             
errf5               
errf7.5             
errf10              
DLTRUE:r2.5         
DLTRUE:rrf5         
DLTRUE:r7.5         
DLTRUE:rr10  0.500  
optimizer (nloptwrap) convergence code: 0 (OK)
boundary (singular) fit: see help('isSingular')

> coef(mod_test)$img
   (Intercept)     DLTRUE    errf2.5     errf5   errf7.5    errf10
V1  0.05489748 0.02173168 0.05140760 0.1638108 0.2735743 0.3746107
V2  0.05612006 0.02173168 0.05120963 0.1560727 0.2612768 0.3558914
V3  0.06754919 0.02173168 0.04935891 0.1690844 0.2827568 0.3898985
V4  0.06870984 0.02173168 0.04917096 0.1375899 0.2324788 0.3129945
V5  0.07066005 0.02173168 0.04885516 0.1299573 0.2203931 0.2946700
V6  0.07418081 0.02173168 0.04828505 0.1577029 0.2649567 0.3632727
V7  0.05467149 0.02173168 0.05144419 0.1215325 0.2059746 0.2710393
V8  0.07237763 0.02173168 0.04857704 0.1320823 0.2238923 0.3001958
V9  0.13940886 0.02173168 0.03772265 0.1099519 0.1925003 0.2585839
   DLTRUE:errf2.5 DLTRUE:errf5 DLTRUE:errf7.5 DLTRUE:errf10
V1    -0.04848491  -0.09915223     -0.1497623    -0.1433657
V2    -0.04848491  -0.09915223     -0.1497623    -0.1433657
V3    -0.04848491  -0.09915223     -0.1497623    -0.1433657
V4    -0.04848491  -0.09915223     -0.1497623    -0.1433657
V5    -0.04848491  -0.09915223     -0.1497623    -0.1433657
V6    -0.04848491  -0.09915223     -0.1497623    -0.1433657
V7    -0.04848491  -0.09915223     -0.1497623    -0.1433657
V8    -0.04848491  -0.09915223     -0.1497623    -0.1433657
V9    -0.04848491  -0.09915223     -0.1497623    -0.1433657
> # Makes more sense without singularity????
> 
> 
> 
> (mod_test <- lmer(vals ~ DL * errs + (DL | img), tmp_dat))
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errs + (DL | img)
   Data: tmp_dat
REML criterion at convergence: -344.5103
Random effects:
 Groups   Name        Std.Dev. Corr 
 img      (Intercept) 0.024056      
          DLTRUE      0.004935 -1.00
 Residual             0.026430      
Number of obs: 90, groups:  img, 9
Fixed Effects:
(Intercept)       DLTRUE         errs  DLTRUE:errs  
    0.03386      0.01961      0.03659     -0.01655  
> # Singular
> 
> summary(mod_test)
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errs + (DL | img)
   Data: tmp_dat

REML criterion at convergence: -344.5

Scaled residuals: 
    Min      1Q  Median      3Q     Max 
-1.6886 -0.6230 -0.1806  0.5499  2.6903 

Random effects:
 Groups   Name        Variance  Std.Dev. Corr 
 img      (Intercept) 5.787e-04 0.024056      
          DLTRUE      2.436e-05 0.004935 -1.00
 Residual             6.986e-04 0.026430      
Number of obs: 90, groups:  img, 9

Fixed effects:
             Estimate Std. Error t value
(Intercept)  0.033864   0.010918   3.102
DLTRUE       0.019615   0.010607   1.849
errs         0.036589   0.001207  30.320
DLTRUE:errs -0.016545   0.001707  -9.695

Correlation of Fixed Effects:
            (Intr) DLTRUE errs  
DLTRUE      -0.588              
errs        -0.575  0.592       
DLTRUE:errs  0.406 -0.837 -0.707
> coef(mod_test)$img
    (Intercept)     DLTRUE       errs DLTRUE:errs
V1  0.037803892 0.01880632 0.03658883 -0.01654539
V2  0.031098260 0.02018202 0.03658883 -0.01654539
V3  0.056109933 0.01505073 0.03658883 -0.01654539
V4  0.024805746 0.02147296 0.03658883 -0.01654539
V5  0.018993895 0.02266530 0.03658883 -0.01654539
V6  0.052012517 0.01589134 0.03658883 -0.01654539
V7 -0.006123809 0.02781833 0.03658883 -0.01654539
V8  0.022302913 0.02198643 0.03658883 -0.01654539
V9  0.067770297 0.01265855 0.03658883 -0.01654539
> 
> 
> 
> 
> 
> (mod_test <- lmer(vals ~ DL * errs + (DL * errs | img), tmp_dat))
boundary (singular) fit: see help('isSingular')
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errs + (DL * errs | img)
   Data: tmp_dat
REML criterion at convergence: -395.731
Random effects:
 Groups   Name        Std.Dev. Corr             
 img      (Intercept) 0.026043                  
          DLTRUE      0.008974  0.87            
          errs        0.006857 -0.68 -0.23      
          DLTRUE:errs 0.002845  0.30 -0.21 -0.90
 Residual             0.016619                  
Number of obs: 90, groups:  img, 9
Fixed Effects:
(Intercept)       DLTRUE         errs  DLTRUE:errs  
    0.03386      0.01961      0.03659     -0.01655  
optimizer (nloptwrap) convergence code: 0 (OK) ; 0 optimizer warnings; 1 lme4 warnings 
> 
> summary(mod_test)
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errs + (DL * errs | img)
   Data: tmp_dat

REML criterion at convergence: -395.7

Scaled residuals: 
     Min       1Q   Median       3Q      Max 
-2.89743 -0.58155 -0.05062  0.53403  2.16101 

Random effects:
 Groups   Name        Variance  Std.Dev. Corr             
 img      (Intercept) 6.782e-04 0.026043                  
          DLTRUE      8.053e-05 0.008974  0.87            
          errs        4.702e-05 0.006857 -0.68 -0.23      
          DLTRUE:errs 8.092e-06 0.002845  0.30 -0.21 -0.90
 Residual             2.762e-04 0.016619                  
Number of obs: 90, groups:  img, 9

Fixed effects:
             Estimate Std. Error t value
(Intercept)  0.033864   0.009852   3.437
DLTRUE       0.019615   0.007236   2.711
errs         0.036589   0.002408  15.192
DLTRUE:errs -0.016545   0.001432 -11.554

Correlation of Fixed Effects:
            (Intr) DLTRUE errs  
DLTRUE       0.012              
errs        -0.699  0.080       
DLTRUE:errs  0.388 -0.636 -0.734
optimizer (nloptwrap) convergence code: 0 (OK)
boundary (singular) fit: see help('isSingular')

> coef(mod_test)$img
   (Intercept)     DLTRUE       errs DLTRUE:errs
V1  0.01167301 0.01508219 0.04295473 -0.01856056
V2  0.01598435 0.01470265 0.04030276 -0.01740126
V3  0.01749113 0.02023673 0.04574008 -0.02044886
V4  0.03336063 0.01751379 0.03448944 -0.01537374
V5  0.03799068 0.01740364 0.03197545 -0.01430996
V6  0.02222292 0.02060901 0.04371445 -0.01965676
V7  0.03153973 0.01094845 0.02805541 -0.01176512
V8  0.03996099 0.01892712 0.03266856 -0.01481382
V9  0.09455021 0.04110841 0.02939855 -0.01657840
> # Singular
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> tmp_dat <- all_dat %>%
+     filter(measures == "RMSPE") %>%
+     filter(method == "MLE") %>%
+     pivot_longer(!c(DL, measures, errs, method), names_to = "img", values_to = "vals") 
> 
> 
> tmp_dat$errf <- factor(tmp_dat$errs)
> (mod_test <- lmer(vals ~ DL * errf + (1 | img), tmp_dat))   # random effect for intercept
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errf + (1 | img)
   Data: tmp_dat
REML criterion at convergence: -331.0826
Random effects:
 Groups   Name        Std.Dev.
 img      (Intercept) 0.05193 
 Residual             0.02174 
Number of obs: 90, groups:  img, 9
Fixed Effects:
   (Intercept)          DLTRUE         errf2.5           errf5         errf7.5  
       0.09920         0.03165         0.05875         0.17554         0.29898  
        errf10  DLTRUE:errf2.5    DLTRUE:errf5  DLTRUE:errf7.5   DLTRUE:errf10  
       0.39549        -0.06136        -0.12641        -0.19070        -0.17603  
> 
> emmeans_1 <- emmeans(mod_test, ~ DL | errf)
> pairs(emmeans_1)
errf = 1:
 contrast     estimate     SE df t.ratio p.value
 FALSE - TRUE  -0.0316 0.0102 72  -3.088  0.0029

errf = 2.5:
 contrast     estimate     SE df t.ratio p.value
 FALSE - TRUE   0.0297 0.0102 72   2.899  0.0050

errf = 5:
 contrast     estimate     SE df t.ratio p.value
 FALSE - TRUE   0.0948 0.0102 72   9.247  <.0001

errf = 7.5:
 contrast     estimate     SE df t.ratio p.value
 FALSE - TRUE   0.1590 0.0102 72  15.520  <.0001

errf = 10:
 contrast     estimate     SE df t.ratio p.value
 FALSE - TRUE   0.1444 0.0102 72  14.088  <.0001

Degrees-of-freedom method: kenward-roger 
> xtable::xtable(pairs(emmeans_1))
% latex table generated in R 4.2.1 by xtable 1.8-4 package
% Sun Jul 24 06:18:36 2022
\begin{table}[ht]
\centering
\begin{tabular}{lrrrrl}
  \hline
contrast & estimate & SE & df & t.ratio & p.value \\ 
  \hline
\multicolumn{6}{l}{errf = 1}\\
FALSE - TRUE & -0.0316 & 0.0102 & 72 & -3.088 & 0.0029 \\ 
   \hline
\multicolumn{6}{l}{errf = 2.5}\\
FALSE - TRUE & 0.0297 & 0.0102 & 72 & 2.899 & 0.0050 \\ 
   \hline
\multicolumn{6}{l}{errf = 5}\\
FALSE - TRUE & 0.0948 & 0.0102 & 72 & 9.247 & $<$.0001 \\ 
   \hline
\multicolumn{6}{l}{errf = 7.5}\\
FALSE - TRUE & 0.1590 & 0.0102 & 72 & 15.520 & $<$.0001 \\ 
   \hline
\multicolumn{6}{l}{errf = 10}\\
FALSE - TRUE & 0.1444 & 0.0102 & 72 & 14.088 & $<$.0001 \\ 
   \hline
\multicolumn{6}{l}{{\footnotesize Degrees-of-freedom method: kenward-roger}}\\
\end{tabular}
\end{table}
> 
> library(ggResidpanel)
> resid_panel(mod_test)
> 
> # p_RMSPE <- resid_panel(mod_test, type='response', plots = "qq") + 
> #     theme_minimal() + theme(panel.background = element_rect(fill = "white", colour = "white", size = 0.5, linetype = "solid"), 
> #                                 plot.background = element_rect(fill = "white"))
> 
> # p_RMSPE
> 
> 
> type = "response"
> model = mod_test
> model_values <- data.frame(Residual = ggResidpanel:::helper_resid(type = "response", model = mod_test))
> r_label <- ggResidpanel:::helper_label(type, model)
> data_add <- ggResidpanel:::helper_plotly_label(model)
> model_values <- cbind(model_values, data_add)
> names(model_values)[which(names(model_values) == "data_add")] <- "Data"
> model_values <- model_values[order(model_values$Residual), ]
> plot <- ggplot(data = model_values, mapping = aes_string(sample = "Residual", 
+     label = "Data")) + stat_qq_point() + labs(x = "Theoretical Quantiles", 
+     y = "Sample Quantiles")
> plot_data <- ggplot_build(plot)
> model_values$Theoretical <- plot_data[[1]][[1]]$theoretical
> model_values$Residual_Plot <- model_values$Residual
> 
> 
> p_RMSPE <- ggplot(data = model_values, mapping = aes_string(sample = "Residual_Plot", 
+     label = "Data")) + stat_qq_point() + 
+     labs(x = "Theoretical Quantiles", y = "Sample Quantiles") + 
+     stat_qq_line(color = "blue", size = 0.5) + 
+     theme_minimal() + theme(panel.background = element_rect(fill = "white", colour = "white", size = 0.5, linetype = "solid"), 
+                                 plot.background = element_rect(fill = "white"),
+                                 axis.text = element_text(size = 15),
+                                 axis.title = element_text(size = 20))
> 
> p_RMSPE_band <- ggplot(data = model_values, mapping = aes_string(sample = "Residual_Plot", 
+     label = "Data")) + stat_qq_band() + stat_qq_point() + 
+     labs(x = "Theoretical Quantiles", y = "Sample Quantiles") + 
+     stat_qq_line(color = "blue", size = 0.5) + 
+     theme_minimal() + theme(panel.background = element_rect(fill = "white", colour = "white", size = 0.5, linetype = "solid"), 
+                                 plot.background = element_rect(fill = "white"),
+                                 axis.text = element_text(size = 15),
+                                 axis.title = element_text(size = 20))
> 
> p_RMSPE
> p_RMSPE_band
> 
> 
> 
> 
> 
> 
> 
> 
> summary(mod_test)
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errf + (1 | img)
   Data: tmp_dat

REML criterion at convergence: -331.1

Scaled residuals: 
     Min       1Q   Median       3Q      Max 
-1.72254 -0.50889  0.01721  0.56321  1.96370 

Random effects:
 Groups   Name        Variance  Std.Dev.
 img      (Intercept) 0.0026966 0.05193 
 Residual             0.0004726 0.02174 
Number of obs: 90, groups:  img, 9

Fixed effects:
               Estimate Std. Error t value
(Intercept)     0.09920    0.01877   5.286
DLTRUE          0.03165    0.01025   3.088
errf2.5         0.05875    0.01025   5.732
errf5           0.17554    0.01025  17.128
errf7.5         0.29898    0.01025  29.174
errf10          0.39549    0.01025  38.591
DLTRUE:errf2.5 -0.06136    0.01449  -4.233
DLTRUE:errf5   -0.12641    0.01449  -8.722
DLTRUE:errf7.5 -0.19070    0.01449 -13.157
DLTRUE:errf10  -0.17603    0.01449 -12.145

Correlation of Fixed Effects:
            (Intr) DLTRUE err2.5 errf5  err7.5 errf10 DLTRUE:2 DLTRUE:5
DLTRUE      -0.273                                                     
errf2.5     -0.273  0.500                                              
errf5       -0.273  0.500  0.500                                       
errf7.5     -0.273  0.500  0.500  0.500                                
errf10      -0.273  0.500  0.500  0.500  0.500                         
DLTRUE:r2.5  0.193 -0.707 -0.707 -0.354 -0.354 -0.354                  
DLTRUE:rrf5  0.193 -0.707 -0.354 -0.707 -0.354 -0.354  0.500           
DLTRUE:r7.5  0.193 -0.707 -0.354 -0.354 -0.707 -0.354  0.500    0.500  
DLTRUE:rr10  0.193 -0.707 -0.354 -0.354 -0.354 -0.707  0.500    0.500  
            DLTRUE:7
DLTRUE              
errf2.5             
errf5               
errf7.5             
errf10              
DLTRUE:r2.5         
DLTRUE:rrf5         
DLTRUE:r7.5         
DLTRUE:rr10  0.500  
> coef(mod_test)$img
   (Intercept)     DLTRUE    errf2.5     errf5   errf7.5    errf10
V1  0.09191373 0.03164527 0.05874641 0.1755357 0.2989798 0.3954895
V2  0.10484461 0.03164527 0.05874641 0.1755357 0.2989798 0.3954895
V3  0.05502204 0.03164527 0.05874641 0.1755357 0.2989798 0.3954895
V4  0.09699251 0.03164527 0.05874641 0.1755357 0.2989798 0.3954895
V5  0.13035917 0.03164527 0.05874641 0.1755357 0.2989798 0.3954895
V6  0.03361833 0.03164527 0.05874641 0.1755357 0.2989798 0.3954895
V7  0.05998166 0.03164527 0.05874641 0.1755357 0.2989798 0.3954895
V8  0.11030615 0.03164527 0.05874641 0.1755357 0.2989798 0.3954895
V9  0.20977369 0.03164527 0.05874641 0.1755357 0.2989798 0.3954895
   DLTRUE:errf2.5 DLTRUE:errf5 DLTRUE:errf7.5 DLTRUE:errf10
V1    -0.06135601   -0.1264087     -0.1906952    -0.1760281
V2    -0.06135601   -0.1264087     -0.1906952    -0.1760281
V3    -0.06135601   -0.1264087     -0.1906952    -0.1760281
V4    -0.06135601   -0.1264087     -0.1906952    -0.1760281
V5    -0.06135601   -0.1264087     -0.1906952    -0.1760281
V6    -0.06135601   -0.1264087     -0.1906952    -0.1760281
V7    -0.06135601   -0.1264087     -0.1906952    -0.1760281
V8    -0.06135601   -0.1264087     -0.1906952    -0.1760281
V9    -0.06135601   -0.1264087     -0.1906952    -0.1760281
> 
> 
> (mod_test <- lmer(vals ~ DL * errs + (DL | img), tmp_dat))
boundary (singular) fit: see help('isSingular')
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errs + (DL | img)
   Data: tmp_dat
REML criterion at convergence: -325.5695
Random effects:
 Groups   Name        Std.Dev. Corr
 img      (Intercept) 0.050015     
          DLTRUE      0.003284 1.00
 Residual             0.027459     
Number of obs: 90, groups:  img, 9
Fixed Effects:
(Intercept)       DLTRUE         errs  DLTRUE:errs  
    0.05156      0.02734      0.04488     -0.02050  
optimizer (nloptwrap) convergence code: 0 (OK) ; 0 optimizer warnings; 1 lme4 warnings 
> # Singular
> summary(mod_test)
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errs + (DL | img)
   Data: tmp_dat

REML criterion at convergence: -325.6

Scaled residuals: 
    Min      1Q  Median      3Q     Max 
-1.7278 -0.6880 -0.1468  0.5606  2.4187 

Random effects:
 Groups   Name        Variance  Std.Dev. Corr
 img      (Intercept) 2.502e-03 0.050015     
          DLTRUE      1.078e-05 0.003284 1.00
 Residual             7.540e-04 0.027459     
Number of obs: 90, groups:  img, 9

Fixed effects:
             Estimate Std. Error t value
(Intercept)  0.051558   0.018363   2.808
DLTRUE       0.027342   0.010941   2.499
errs         0.044883   0.001254  35.800
DLTRUE:errs -0.020499   0.001773 -11.561

Correlation of Fixed Effects:
            (Intr) DLTRUE errs  
DLTRUE      -0.204              
errs        -0.355  0.596       
DLTRUE:errs  0.251 -0.843 -0.707
optimizer (nloptwrap) convergence code: 0 (OK)
boundary (singular) fit: see help('isSingular')

> coef(mod_test)$img
    (Intercept)     DLTRUE       errs DLTRUE:errs
V1  0.044301971 0.02686551 0.04488332 -0.02049889
V2  0.056611081 0.02767364 0.04488332 -0.02049889
V3  0.009314206 0.02456848 0.04488332 -0.02049889
V4  0.049368371 0.02719814 0.04488332 -0.02049889
V5  0.081166411 0.02928576 0.04488332 -0.02049889
V6 -0.011135043 0.02322593 0.04488332 -0.02049889
V7  0.014250992 0.02489259 0.04488332 -0.02049889
V8  0.062384575 0.02805268 0.04488332 -0.02049889
V9  0.157762626 0.03431450 0.04488332 -0.02049889
> 
> 
> (mod_test <- lmer(vals ~ DL * errs + (errs | img), tmp_dat))
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errs + (errs | img)
   Data: tmp_dat
REML criterion at convergence: -342.8992
Random effects:
 Groups   Name        Std.Dev. Corr 
 img      (Intercept) 0.054319      
          errs        0.004805 -0.32
 Residual             0.022458      
Number of obs: 90, groups:  img, 9
Fixed Effects:
(Intercept)       DLTRUE         errs  DLTRUE:errs  
    0.05156      0.02734      0.04488     -0.02050  
> summary(mod_test)
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errs + (errs | img)
   Data: tmp_dat

REML criterion at convergence: -342.9

Scaled residuals: 
     Min       1Q   Median       3Q      Max 
-1.65883 -0.69387 -0.03132  0.61872  2.37605 

Random effects:
 Groups   Name        Variance  Std.Dev. Corr 
 img      (Intercept) 2.951e-03 0.054319      
          errs        2.309e-05 0.004805 -0.32
 Residual             5.044e-04 0.022458      
Number of obs: 90, groups:  img, 9

Fixed effects:
             Estimate Std. Error t value
(Intercept)  0.051558   0.019170   2.690
DLTRUE       0.027342   0.008904   3.071
errs         0.044883   0.001902  23.602
DLTRUE:errs -0.020499   0.001450 -14.136

Correlation of Fixed Effects:
            (Intr) DLTRUE errs  
DLTRUE      -0.232              
errs        -0.408  0.323       
DLTRUE:errs  0.197 -0.847 -0.381
> coef(mod_test)$img
   (Intercept)     DLTRUE       errs DLTRUE:errs
V1  0.01498671 0.02734191 0.05054829 -0.02049889
V2  0.02370132 0.02734191 0.05135972 -0.02049889
V3  0.01371399 0.02734191 0.04367158 -0.02049889
V4  0.04734388 0.02734191 0.04527183 -0.02049889
V5  0.06798356 0.02734191 0.04772287 -0.02049889
V6  0.01515678 0.02734191 0.03926008 -0.02049889
V7  0.03753444 0.02734191 0.04002289 -0.02049889
V8  0.06202215 0.02734191 0.04500394 -0.02049889
V9  0.18158237 0.02734191 0.04108868 -0.02049889
> # Makes more sense without singularity????
> 
> 
> (mod_test <- lmer(vals ~ DL * errs + (DL * errs | img), tmp_dat))
boundary (singular) fit: see help('isSingular')
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errs + (DL * errs | img)
   Data: tmp_dat
REML criterion at convergence: -352.6349
Random effects:
 Groups   Name        Std.Dev. Corr             
 img      (Intercept) 0.046822                  
          DLTRUE      0.018633  0.82            
          errs        0.004951 -0.11 -0.66      
          DLTRUE:errs 0.001342 -0.98 -0.68 -0.09
 Residual             0.020729                  
Number of obs: 90, groups:  img, 9
Fixed Effects:
(Intercept)       DLTRUE         errs  DLTRUE:errs  
    0.05156      0.02734      0.04488     -0.02050  
optimizer (nloptwrap) convergence code: 0 (OK) ; 0 optimizer warnings; 1 lme4 warnings 
> 
> summary(mod_test)
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errs + (DL * errs | img)
   Data: tmp_dat

REML criterion at convergence: -352.6

Scaled residuals: 
    Min      1Q  Median      3Q     Max 
-1.7119 -0.7528 -0.1901  0.6840  1.9688 

Random effects:
 Groups   Name        Variance  Std.Dev. Corr             
 img      (Intercept) 2.192e-03 0.046822                  
          DLTRUE      3.472e-04 0.018633  0.82            
          errs        2.452e-05 0.004951 -0.11 -0.66      
          DLTRUE:errs 1.802e-06 0.001342 -0.98 -0.68 -0.09
 Residual             4.297e-04 0.020729                  
Number of obs: 90, groups:  img, 9

Fixed effects:
             Estimate Std. Error t value
(Intercept)  0.051558   0.016654   3.096
DLTRUE       0.027342   0.010301   2.654
errs         0.044883   0.001903  23.591
DLTRUE:errs -0.020499   0.001411 -14.525

Correlation of Fixed Effects:
            (Intr) DLTRUE errs  
DLTRUE       0.265              
errs        -0.237 -0.109       
DLTRUE:errs -0.093 -0.771 -0.360
optimizer (nloptwrap) convergence code: 0 (OK)
boundary (singular) fit: see help('isSingular')

> coef(mod_test)$img
   (Intercept)      DLTRUE       errs DLTRUE:errs
V1  0.02410748 0.006783229 0.05053858 -0.02002598
V2  0.03186140 0.006604096 0.05168705 -0.02031275
V3  0.01753838 0.021389268 0.04293543 -0.01941315
V4  0.04714946 0.024784606 0.04545005 -0.02040388
V5  0.06662305 0.023763645 0.04859633 -0.02113870
V6  0.01351817 0.029609369 0.03861203 -0.01905649
V7  0.03566600 0.034834413 0.03926103 -0.01972880
V8  0.06375717 0.031812702 0.04451014 -0.02082844
V9  0.16380408 0.066495903 0.04235922 -0.02358186
> # Singular
> 
> 
> 
> 
> 
> 
> tmp_dat <- all_dat %>%
+     filter(measures == "SSIM") %>%
+     filter(method == "MLE") %>%
+     pivot_longer(!c(DL, measures, errs, method), names_to = "img", values_to = "vals") 
> 
> 
> tmp_dat$errf <- factor(tmp_dat$errs)
> (mod_test <- lmer(vals ~ DL * errf + (1 | img), tmp_dat))   # random effect for intercept
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errf + (1 | img)
   Data: tmp_dat
REML criterion at convergence: 316.8171
Random effects:
 Groups   Name        Std.Dev.
 img      (Intercept) 2.484   
 Residual             1.272   
Number of obs: 90, groups:  img, 9
Fixed Effects:
   (Intercept)          DLTRUE         errf2.5           errf5         errf7.5  
       98.1411         -0.9136         -3.3817         -9.9853        -16.3168  
        errf10  DLTRUE:errf2.5    DLTRUE:errf5  DLTRUE:errf7.5   DLTRUE:errf10  
      -20.6600          3.1886          7.1299         10.0878          8.7112  
> 
> emmeans_1 <- emmeans(mod_test, ~ DL | errf)
> pairs(emmeans_1)
errf = 1:
 contrast     estimate  SE df t.ratio p.value
 FALSE - TRUE    0.914 0.6 72   1.524  0.1320

errf = 2.5:
 contrast     estimate  SE df t.ratio p.value
 FALSE - TRUE   -2.275 0.6 72  -3.795  0.0003

errf = 5:
 contrast     estimate  SE df t.ratio p.value
 FALSE - TRUE   -6.216 0.6 72 -10.368  <.0001

errf = 7.5:
 contrast     estimate  SE df t.ratio p.value
 FALSE - TRUE   -9.174 0.6 72 -15.302  <.0001

errf = 10:
 contrast     estimate  SE df t.ratio p.value
 FALSE - TRUE   -7.798 0.6 72 -13.006  <.0001

Degrees-of-freedom method: kenward-roger 
> 
> library(ggResidpanel)
> resid_panel(mod_test)
> 
> # p_SSIM <- resid_panel(mod_test, type='response', plots = "qq") + 
> #     theme_minimal() + theme(panel.background = element_rect(fill = "white", colour = "white", size = 0.5, linetype = "solid"), 
> #                                 plot.background = element_rect(fill = "white"))
> 
> # p_SSIM
> 
> 
> type = "response"
> model = mod_test
> model_values <- data.frame(Residual = ggResidpanel:::helper_resid(type = "response", model = mod_test))
> r_label <- ggResidpanel:::helper_label(type, model)
> data_add <- ggResidpanel:::helper_plotly_label(model)
> model_values <- cbind(model_values, data_add)
> names(model_values)[which(names(model_values) == "data_add")] <- "Data"
> model_values <- model_values[order(model_values$Residual), ]
> plot <- ggplot(data = model_values, mapping = aes_string(sample = "Residual", 
+     label = "Data")) + stat_qq_point() + labs(x = "Theoretical Quantiles", 
+     y = "Sample Quantiles")
> plot_data <- ggplot_build(plot)
> model_values$Theoretical <- plot_data[[1]][[1]]$theoretical
> model_values$Residual_Plot <- model_values$Residual
> 
> 
> p_SSIM <- ggplot(data = model_values, mapping = aes_string(sample = "Residual_Plot", 
+     label = "Data")) + stat_qq_point() + 
+     labs(x = "Theoretical Quantiles", y = "Sample Quantiles") + 
+     stat_qq_line(color = "blue", size = 0.5) + 
+     theme_minimal() + theme(panel.background = element_rect(fill = "white", colour = "white", size = 0.5, linetype = "solid"), 
+                                 plot.background = element_rect(fill = "white"),
+                                 axis.text = element_text(size = 15),
+                                 axis.title = element_text(size = 20))
> 
> p_SSIM_band <- ggplot(data = model_values, mapping = aes_string(sample = "Residual_Plot", 
+     label = "Data")) + stat_qq_band() + stat_qq_point() + 
+     labs(x = "Theoretical Quantiles", y = "Sample Quantiles") + 
+     stat_qq_line(color = "blue", size = 0.5) + 
+     theme_minimal() + theme(panel.background = element_rect(fill = "white", colour = "white", size = 0.5, linetype = "solid"), 
+                                 plot.background = element_rect(fill = "white"),
+                                 axis.text = element_text(size = 15),
+                                 axis.title = element_text(size = 20))
> 
> p_SSIM
> p_SSIM_band
> 
> 
> 
> 
> summary(mod_test)
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errf + (1 | img)
   Data: tmp_dat

REML criterion at convergence: 316.8

Scaled residuals: 
     Min       1Q   Median       3Q      Max 
-2.06819 -0.47968 -0.00942  0.36204  2.18832 

Random effects:
 Groups   Name        Variance Std.Dev.
 img      (Intercept) 6.170    2.484   
 Residual             1.618    1.272   
Number of obs: 90, groups:  img, 9

Fixed effects:
               Estimate Std. Error t value
(Intercept)     98.1411     0.9302 105.504
DLTRUE          -0.9136     0.5996  -1.524
errf2.5         -3.3817     0.5996  -5.640
errf5           -9.9853     0.5996 -16.654
errf7.5        -16.3168     0.5996 -27.215
errf10         -20.6600     0.5996 -34.459
DLTRUE:errf2.5   3.1886     0.8479   3.761
DLTRUE:errf5     7.1299     0.8479   8.409
DLTRUE:errf7.5  10.0878     0.8479  11.897
DLTRUE:errf10    8.7112     0.8479  10.274

Correlation of Fixed Effects:
            (Intr) DLTRUE err2.5 errf5  err7.5 errf10 DLTRUE:2 DLTRUE:5
DLTRUE      -0.322                                                     
errf2.5     -0.322  0.500                                              
errf5       -0.322  0.500  0.500                                       
errf7.5     -0.322  0.500  0.500  0.500                                
errf10      -0.322  0.500  0.500  0.500  0.500                         
DLTRUE:r2.5  0.228 -0.707 -0.707 -0.354 -0.354 -0.354                  
DLTRUE:rrf5  0.228 -0.707 -0.354 -0.707 -0.354 -0.354  0.500           
DLTRUE:r7.5  0.228 -0.707 -0.354 -0.354 -0.707 -0.354  0.500    0.500  
DLTRUE:rr10  0.228 -0.707 -0.354 -0.354 -0.354 -0.707  0.500    0.500  
            DLTRUE:7
DLTRUE              
errf2.5             
errf5               
errf7.5             
errf10              
DLTRUE:r2.5         
DLTRUE:rrf5         
DLTRUE:r7.5         
DLTRUE:rr10  0.500  
> coef(mod_test)$img
   (Intercept)     DLTRUE   errf2.5     errf5   errf7.5    errf10
V1    99.64008 -0.9135676 -3.381719 -9.985326 -16.31678 -20.66005
V2    99.12590 -0.9135676 -3.381719 -9.985326 -16.31678 -20.66005
V3   100.02025 -0.9135676 -3.381719 -9.985326 -16.31678 -20.66005
V4    96.75094 -0.9135676 -3.381719 -9.985326 -16.31678 -20.66005
V5    93.40941 -0.9135676 -3.381719 -9.985326 -16.31678 -20.66005
V6    96.45648 -0.9135676 -3.381719 -9.985326 -16.31678 -20.66005
V7    96.72721 -0.9135676 -3.381719 -9.985326 -16.31678 -20.66005
V8   101.01379 -0.9135676 -3.381719 -9.985326 -16.31678 -20.66005
V9   100.12599 -0.9135676 -3.381719 -9.985326 -16.31678 -20.66005
   DLTRUE:errf2.5 DLTRUE:errf5 DLTRUE:errf7.5 DLTRUE:errf10
V1       3.188629     7.129904       10.08779      8.711192
V2       3.188629     7.129904       10.08779      8.711192
V3       3.188629     7.129904       10.08779      8.711192
V4       3.188629     7.129904       10.08779      8.711192
V5       3.188629     7.129904       10.08779      8.711192
V6       3.188629     7.129904       10.08779      8.711192
V7       3.188629     7.129904       10.08779      8.711192
V8       3.188629     7.129904       10.08779      8.711192
V9       3.188629     7.129904       10.08779      8.711192
> 
> 
> (mod_test <- lmer(vals ~ DL * errs + (DL | img), tmp_dat))
boundary (singular) fit: see help('isSingular')
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errs + (DL | img)
   Data: tmp_dat
REML criterion at convergence: 361.4674
Random effects:
 Groups   Name        Std.Dev. Corr 
 img      (Intercept) 2.7810        
          DLTRUE      0.6198   -1.00
 Residual             1.5086        
Number of obs: 90, groups:  img, 9
Fixed Effects:
(Intercept)       DLTRUE         errs  DLTRUE:errs  
    100.323       -0.454       -2.356        1.032  
optimizer (nloptwrap) convergence code: 0 (OK) ; 0 optimizer warnings; 1 lme4 warnings 
> # Singular
> summary(mod_test)
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errs + (DL | img)
   Data: tmp_dat

REML criterion at convergence: 361.5

Scaled residuals: 
     Min       1Q   Median       3Q      Max 
-2.62650 -0.70135  0.09557  0.72595  1.98336 

Random effects:
 Groups   Name        Variance Std.Dev. Corr 
 img      (Intercept) 7.7342   2.7810        
          DLTRUE      0.3841   0.6198   -1.00
 Residual             2.2758   1.5086        
Number of obs: 90, groups:  img, 9

Fixed effects:
             Estimate Std. Error t value
(Intercept) 100.32299    1.01893  98.459
DLTRUE       -0.45400    0.63276  -0.717
errs         -2.35589    0.06888 -34.204
DLTRUE:errs   1.03153    0.09741  10.590

Correlation of Fixed Effects:
            (Intr) DLTRUE errs  
DLTRUE      -0.574              
errs        -0.352  0.566       
DLTRUE:errs  0.249 -0.800 -0.707
optimizer (nloptwrap) convergence code: 0 (OK)
boundary (singular) fit: see help('isSingular')

> coef(mod_test)$img
   (Intercept)      DLTRUE      errs DLTRUE:errs
V1   101.95632 -0.81799727 -2.355893    1.031526
V2   101.37320 -0.68804673 -2.355893    1.031526
V3   102.40113 -0.91712404 -2.355893    1.031526
V4    98.74937 -0.10331514 -2.355893    1.031526
V5    95.06047  0.71876971 -2.355893    1.031526
V6    98.46514 -0.03997526 -2.355893    1.031526
V7    98.76116 -0.10594304 -2.355893    1.031526
V8   103.53929 -1.17076740 -2.355893    1.031526
V9   102.60080 -0.96162112 -2.355893    1.031526
> 
> 
> (mod_test <- lmer(vals ~ DL * errs + (errs | img), tmp_dat))
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errs + (errs | img)
   Data: tmp_dat
REML criterion at convergence: 336.6324
Random effects:
 Groups   Name        Std.Dev. Corr
 img      (Intercept) 1.2325       
          errs        0.2698   0.78
 Residual             1.2573       
Number of obs: 90, groups:  img, 9
Fixed Effects:
(Intercept)       DLTRUE         errs  DLTRUE:errs  
    100.323       -0.454       -2.356        1.032  
> summary(mod_test)
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errs + (errs | img)
   Data: tmp_dat

REML criterion at convergence: 336.6

Scaled residuals: 
    Min      1Q  Median      3Q     Max 
-2.2948 -0.7928  0.1976  0.7559  1.6956 

Random effects:
 Groups   Name        Variance Std.Dev. Corr
 img      (Intercept) 1.51894  1.2325       
          errs        0.07281  0.2698   0.78
 Residual             1.58084  1.2573       
Number of obs: 90, groups:  img, 9

Fixed effects:
             Estimate Std. Error t value
(Intercept) 100.32299    0.54130 185.336
DLTRUE       -0.45400    0.49848  -0.911
errs         -2.35589    0.10670 -22.079
DLTRUE:errs   1.03153    0.08118  12.706

Correlation of Fixed Effects:
            (Intr) DLTRUE errs  
DLTRUE      -0.460              
errs         0.200  0.322       
DLTRUE:errs  0.390 -0.847 -0.380
> coef(mod_test)$img
   (Intercept)     DLTRUE      errs DLTRUE:errs
V1   101.22635 -0.4540023 -2.262687    1.031526
V2   101.04553 -0.4540023 -2.332815    1.031526
V3   101.23726 -0.4540023 -2.174535    1.031526
V4    99.84036 -0.4540023 -2.547345    1.031526
V5    98.11186 -0.4540023 -2.839477    1.031526
V6    99.30410 -0.4540023 -2.459575    1.031526
V7    99.65334 -0.4540023 -2.497753    1.031526
V8   101.53255 -0.4540023 -2.023031    1.031526
V9   100.95553 -0.4540023 -2.065822    1.031526
> # Makes more sense without singularity????
> 
> 
> (mod_test <- lmer(vals ~ DL * errs + (DL * errs | img), tmp_dat))
boundary (singular) fit: see help('isSingular')
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errs + (DL * errs | img)
   Data: tmp_dat
REML criterion at convergence: 329.4997
Random effects:
 Groups   Name        Std.Dev. Corr             
 img      (Intercept) 1.62777                   
          DLTRUE      0.97268  -0.77            
          errs        0.25399   0.82 -1.00      
          DLTRUE:errs 0.04754   0.84 -0.99  1.00
 Residual             1.17962                   
Number of obs: 90, groups:  img, 9
Fixed Effects:
(Intercept)       DLTRUE         errs  DLTRUE:errs  
    100.323       -0.454       -2.356        1.032  
optimizer (nloptwrap) convergence code: 0 (OK) ; 0 optimizer warnings; 1 lme4 warnings 
> 
> summary(mod_test)
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errs + (DL * errs | img)
   Data: tmp_dat

REML criterion at convergence: 329.5

Scaled residuals: 
    Min      1Q  Median      3Q     Max 
-1.7521 -0.8391  0.1914  0.7550  1.9389 

Random effects:
 Groups   Name        Variance Std.Dev. Corr             
 img      (Intercept) 2.64962  1.62777                   
          DLTRUE      0.94611  0.97268  -0.77            
          errs        0.06451  0.25399   0.82 -1.00      
          DLTRUE:errs 0.00226  0.04754   0.84 -0.99  1.00
 Residual             1.39151  1.17962                   
Number of obs: 90, groups:  img, 9

Fixed effects:
            Estimate Std. Error t value
(Intercept) 100.3230     0.6354 157.884
DLTRUE       -0.4540     0.5691  -0.798
errs         -2.3559     0.1003 -23.479
DLTRUE:errs   1.0315     0.0778  13.259

Correlation of Fixed Effects:
            (Intr) DLTRUE errs  
DLTRUE      -0.679              
errs         0.351 -0.215       
DLTRUE:errs  0.451 -0.797 -0.200
optimizer (nloptwrap) convergence code: 0 (OK)
boundary (singular) fit: see help('isSingular')

> coef(mod_test)$img
   (Intercept)      DLTRUE      errs DLTRUE:errs
V1   101.48655 -0.60637231 -2.299655   1.0435821
V2   101.21112 -0.32671624 -2.371015   1.0304050
V3   101.58479 -1.00921579 -2.201972   1.0611275
V4    99.58604  0.31966975 -2.552886   0.9951922
V5    97.26662  1.16596188 -2.794286   0.9481666
V6    99.03572 -0.25482166 -2.425406   1.0168917
V7    99.38474 -0.01390034 -2.476841   1.0083606
V8   102.05398 -1.66721669 -2.037131   1.0912714
V9   101.29731 -1.69340890 -2.043848   1.0887409
> # Singular
> 
> 
> 
> 
> pdf('qqplots.pdf')
> p_MAPE_band
> p_RMSPE_band
> p_SSIM_band
> 
> p_MAPE
> p_RMSPE
> p_SSIM
> 
> # p_MAPE + ggtitle('Q-Q Plot for residuals of radom effects model fitted to MAPE measures')
> # p_RMSPE + ggtitle('Q-Q Plot for residuals of radom effects model fitted to RMSPE measures')
> # p_SSIM + ggtitle('Q-Q Plot for residuals of radom effects model fitted to SSIM measures')
> dev.off()
pdf 
  2 
> 
> 
> sys.call("pdfcrop qqplots.pdf")
Error in sys.call("pdfcrop qqplots.pdf") : invalid 'which' argument
In addition: Warning message:
In sys.call("pdfcrop qqplots.pdf") : NAs introduced by coercion
Execution halted
