
R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> noise_vec <- c(1, 2.5, 5, 7.5, 10)
> all_normal <- c()
> all_DL     <- c()
> 
> for(i in 1:5){
+     f1 <- paste0("values/pred-noise-", noise_vec[i], "-INU-00.csv")
+     f2 <- paste0("values/DL-pred-noise-", noise_vec[i], "-INU-00.csv")
+ 
+     all_normal <- rbind(all_normal, as.matrix(read.csv(f1, header = F))[c(6,7,3, 11,12,10), ])  # to take only the normalized? versions c(4,5,3, 9,10,8)
+     all_DL     <- rbind(all_DL    , as.matrix(read.csv(f2, header = F))[c(6,7,3, 11,12,10), ])
+ }
> 
> all_normal <- data.frame(all_normal)
> all_DL <- data.frame(all_DL)
> 
> method <- rep(c("LS", "MLE"), each=3, times=5)
> measures <- rep(c("MAPE", "RMSPE", "SSIM"), 5 * 2)
> errs <- rep(c(1, 2.5, 5, 7.5, 10), each = 3 * 2)
> DL <- rep(c(F, T), each = 5 * 3 * 2)
> 
> all_normal <- cbind(measures, errs, method, all_normal)
> all_DL     <- cbind(measures, errs, method, all_DL    )
> 
> all_dat <- cbind(DL, rbind(all_normal, all_DL))
> 
> rm(DL)
> rm(measures)
> rm(errs)
> 
> 
> library(tidyverse)
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──
✔ ggplot2 3.3.5     ✔ purrr   0.3.4
✔ tibble  3.1.6     ✔ dplyr   1.0.7
✔ tidyr   1.1.4     ✔ stringr 1.4.0
✔ readr   2.1.1     ✔ forcats 0.5.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
> tmp_dat <- all_dat %>%
+     filter(measures == "MAPE") %>%
+     filter(method == "LS") %>%
+     pivot_longer(!c(DL, measures, errs, method), names_to = "img", values_to = "vals") 
> 
> 
> library(lme4)
Loading required package: Matrix

Attaching package: ‘Matrix’

The following objects are masked from ‘package:tidyr’:

    expand, pack, unpack

> mod1 <- lmer(vals ~ DL + (DL | img), tmp_dat)
boundary (singular) fit: see help('isSingular')
> mod1
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL + (DL | img)
   Data: tmp_dat
REML criterion at convergence: -150.1976
Random effects:
 Groups   Name        Std.Dev.  Corr
 img      (Intercept) 0.000e+00     
          DLTRUE      1.362e-08  NaN
 Residual             9.871e-02     
Number of obs: 90, groups:  img, 9
Fixed Effects:
(Intercept)       DLTRUE  
    0.21523     -0.05985  
optimizer (nloptwrap) convergence code: 0 (OK) ; 0 optimizer warnings; 1 lme4 warnings 
> 
> 
> ## Random effects model to the real data
> ggplot(tmp_dat) + 
+     aes(x = DL, y = vals, group = errs, shape=method, color=factor(errs), linetype = factor(errs)) +
+     geom_point(aes(size=1)) + 
+     facet_grid(cols = vars(img)) +
+     geom_line()
> 
> 
> tmp_dat$errf <- factor(tmp_dat$errs)
> 
> (mod_test <- lmer(vals ~ DL * errf + (1 | img), tmp_dat))   # random effect for intercept   # make new column, errf
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errf + (1 | img)
   Data: tmp_dat
REML criterion at convergence: -343.6238
Random effects:
 Groups   Name        Std.Dev.
 img      (Intercept) 0.02239 
 Residual             0.02179 
Number of obs: 90, groups:  img, 9
Fixed Effects:
   (Intercept)          DLTRUE         errf2.5           errf5         errf7.5  
       0.07275         0.02189         0.04464         0.13168         0.22260  
        errf10  DLTRUE:errf2.5    DLTRUE:errf5  DLTRUE:errf7.5   DLTRUE:errf10  
       0.31349        -0.04440        -0.08944        -0.13367        -0.14117  
> 
> library(emmeans)
> emmeans_1 <- emmeans(mod_test, ~ DL | errf)
> pairs(emmeans_1)
errf = 1:
 contrast     estimate     SE df t.ratio p.value
 FALSE - TRUE  -0.0219 0.0103 72  -2.131  0.0365

errf = 2.5:
 contrast     estimate     SE df t.ratio p.value
 FALSE - TRUE   0.0225 0.0103 72   2.192  0.0316

errf = 5:
 contrast     estimate     SE df t.ratio p.value
 FALSE - TRUE   0.0676 0.0103 72   6.577  <.0001

errf = 7.5:
 contrast     estimate     SE df t.ratio p.value
 FALSE - TRUE   0.1118 0.0103 72  10.882  <.0001

errf = 10:
 contrast     estimate     SE df t.ratio p.value
 FALSE - TRUE   0.1193 0.0103 72  11.613  <.0001

Degrees-of-freedom method: kenward-roger 
> xtable::xtable(pairs(emmeans_1))
% latex table generated in R 4.2.0 by xtable 1.8-4 package
% Tue Jun 21 00:32:46 2022
\begin{table}[ht]
\centering
\begin{tabular}{lrrrrl}
  \hline
contrast & estimate & SE & df & t.ratio & p.value \\ 
  \hline
\multicolumn{6}{l}{errf = 1}\\
FALSE - TRUE & -0.0219 & 0.0103 & 72 & -2.131 & 0.0365 \\ 
   \hline
\multicolumn{6}{l}{errf = 2.5}\\
FALSE - TRUE & 0.0225 & 0.0103 & 72 & 2.192 & 0.0316 \\ 
   \hline
\multicolumn{6}{l}{errf = 5}\\
FALSE - TRUE & 0.0676 & 0.0103 & 72 & 6.577 & $<$.0001 \\ 
   \hline
\multicolumn{6}{l}{errf = 7.5}\\
FALSE - TRUE & 0.1118 & 0.0103 & 72 & 10.882 & $<$.0001 \\ 
   \hline
\multicolumn{6}{l}{errf = 10}\\
FALSE - TRUE & 0.1193 & 0.0103 & 72 & 11.613 & $<$.0001 \\ 
   \hline
\multicolumn{6}{l}{{\footnotesize Degrees-of-freedom method: kenward-roger}}\\
\end{tabular}
\end{table}
> 
> library(ggResidpanel)
> resid_panel(mod_test)
> resid_panel(mod_test, type='response')
> # resid_panel(mod_test, type='standardized')
> 
> p_MAPE <- resid_panel(mod_test, type='response', plots = "qq") + 
+     theme_minimal() + theme(panel.background = element_rect(fill = "white", colour = "white", size = 0.5, linetype = "solid"), 
+                                 plot.background = element_rect(fill = "white"))
> 
> p_MAPE
> 
> (design_X <- getME(mod_test, "X"))
   (Intercept) DLTRUE errf2.5 errf5 errf7.5 errf10 DLTRUE:errf2.5 DLTRUE:errf5
1            1      0       0     0       0      0              0            0
2            1      0       0     0       0      0              0            0
3            1      0       0     0       0      0              0            0
4            1      0       0     0       0      0              0            0
5            1      0       0     0       0      0              0            0
6            1      0       0     0       0      0              0            0
7            1      0       0     0       0      0              0            0
8            1      0       0     0       0      0              0            0
9            1      0       0     0       0      0              0            0
10           1      0       1     0       0      0              0            0
11           1      0       1     0       0      0              0            0
12           1      0       1     0       0      0              0            0
13           1      0       1     0       0      0              0            0
14           1      0       1     0       0      0              0            0
15           1      0       1     0       0      0              0            0
16           1      0       1     0       0      0              0            0
17           1      0       1     0       0      0              0            0
18           1      0       1     0       0      0              0            0
19           1      0       0     1       0      0              0            0
20           1      0       0     1       0      0              0            0
21           1      0       0     1       0      0              0            0
22           1      0       0     1       0      0              0            0
23           1      0       0     1       0      0              0            0
24           1      0       0     1       0      0              0            0
25           1      0       0     1       0      0              0            0
26           1      0       0     1       0      0              0            0
27           1      0       0     1       0      0              0            0
28           1      0       0     0       1      0              0            0
29           1      0       0     0       1      0              0            0
30           1      0       0     0       1      0              0            0
31           1      0       0     0       1      0              0            0
32           1      0       0     0       1      0              0            0
33           1      0       0     0       1      0              0            0
34           1      0       0     0       1      0              0            0
35           1      0       0     0       1      0              0            0
36           1      0       0     0       1      0              0            0
37           1      0       0     0       0      1              0            0
38           1      0       0     0       0      1              0            0
39           1      0       0     0       0      1              0            0
40           1      0       0     0       0      1              0            0
41           1      0       0     0       0      1              0            0
42           1      0       0     0       0      1              0            0
43           1      0       0     0       0      1              0            0
44           1      0       0     0       0      1              0            0
45           1      0       0     0       0      1              0            0
46           1      1       0     0       0      0              0            0
47           1      1       0     0       0      0              0            0
48           1      1       0     0       0      0              0            0
49           1      1       0     0       0      0              0            0
50           1      1       0     0       0      0              0            0
51           1      1       0     0       0      0              0            0
52           1      1       0     0       0      0              0            0
53           1      1       0     0       0      0              0            0
54           1      1       0     0       0      0              0            0
55           1      1       1     0       0      0              1            0
56           1      1       1     0       0      0              1            0
57           1      1       1     0       0      0              1            0
58           1      1       1     0       0      0              1            0
59           1      1       1     0       0      0              1            0
60           1      1       1     0       0      0              1            0
61           1      1       1     0       0      0              1            0
62           1      1       1     0       0      0              1            0
63           1      1       1     0       0      0              1            0
64           1      1       0     1       0      0              0            1
65           1      1       0     1       0      0              0            1
66           1      1       0     1       0      0              0            1
67           1      1       0     1       0      0              0            1
68           1      1       0     1       0      0              0            1
69           1      1       0     1       0      0              0            1
70           1      1       0     1       0      0              0            1
71           1      1       0     1       0      0              0            1
72           1      1       0     1       0      0              0            1
73           1      1       0     0       1      0              0            0
74           1      1       0     0       1      0              0            0
75           1      1       0     0       1      0              0            0
76           1      1       0     0       1      0              0            0
77           1      1       0     0       1      0              0            0
78           1      1       0     0       1      0              0            0
79           1      1       0     0       1      0              0            0
80           1      1       0     0       1      0              0            0
81           1      1       0     0       1      0              0            0
82           1      1       0     0       0      1              0            0
83           1      1       0     0       0      1              0            0
84           1      1       0     0       0      1              0            0
85           1      1       0     0       0      1              0            0
86           1      1       0     0       0      1              0            0
87           1      1       0     0       0      1              0            0
88           1      1       0     0       0      1              0            0
89           1      1       0     0       0      1              0            0
90           1      1       0     0       0      1              0            0
   DLTRUE:errf7.5 DLTRUE:errf10
1               0             0
2               0             0
3               0             0
4               0             0
5               0             0
6               0             0
7               0             0
8               0             0
9               0             0
10              0             0
11              0             0
12              0             0
13              0             0
14              0             0
15              0             0
16              0             0
17              0             0
18              0             0
19              0             0
20              0             0
21              0             0
22              0             0
23              0             0
24              0             0
25              0             0
26              0             0
27              0             0
28              0             0
29              0             0
30              0             0
31              0             0
32              0             0
33              0             0
34              0             0
35              0             0
36              0             0
37              0             0
38              0             0
39              0             0
40              0             0
41              0             0
42              0             0
43              0             0
44              0             0
45              0             0
46              0             0
47              0             0
48              0             0
49              0             0
50              0             0
51              0             0
52              0             0
53              0             0
54              0             0
55              0             0
56              0             0
57              0             0
58              0             0
59              0             0
60              0             0
61              0             0
62              0             0
63              0             0
64              0             0
65              0             0
66              0             0
67              0             0
68              0             0
69              0             0
70              0             0
71              0             0
72              0             0
73              1             0
74              1             0
75              1             0
76              1             0
77              1             0
78              1             0
79              1             0
80              1             0
81              1             0
82              0             1
83              0             1
84              0             1
85              0             1
86              0             1
87              0             1
88              0             1
89              0             1
90              0             1
attr(,"assign")
 [1] 0 1 2 2 2 2 3 3 3 3
attr(,"contrasts")
attr(,"contrasts")$DL
[1] "contr.treatment"

attr(,"contrasts")$errf
[1] "contr.treatment"

attr(,"msgScaleX")
character(0)
> design_X %*% t(design_X)
   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28
1  1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
2  1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
3  1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
4  1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
5  1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
6  1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
7  1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
8  1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
9  1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
10 1 1 1 1 1 1 1 1 1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1
11 1 1 1 1 1 1 1 1 1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1
12 1 1 1 1 1 1 1 1 1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1
13 1 1 1 1 1 1 1 1 1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1
14 1 1 1 1 1 1 1 1 1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1
15 1 1 1 1 1 1 1 1 1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1
16 1 1 1 1 1 1 1 1 1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1
17 1 1 1 1 1 1 1 1 1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1
18 1 1 1 1 1 1 1 1 1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1
19 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1
20 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1
21 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1
22 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1
23 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1
24 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1
25 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1
26 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1
27 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1
28 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2
29 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2
30 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2
31 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2
32 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2
33 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2
34 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2
35 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2
36 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2
37 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
38 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
39 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
40 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
41 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
42 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
43 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
44 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
45 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
46 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
47 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
48 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
49 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
50 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
51 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
52 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
53 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
54 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
55 1 1 1 1 1 1 1 1 1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1
56 1 1 1 1 1 1 1 1 1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1
57 1 1 1 1 1 1 1 1 1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1
58 1 1 1 1 1 1 1 1 1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1
59 1 1 1 1 1 1 1 1 1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1
60 1 1 1 1 1 1 1 1 1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1
61 1 1 1 1 1 1 1 1 1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1
62 1 1 1 1 1 1 1 1 1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1
63 1 1 1 1 1 1 1 1 1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1
64 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1
65 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1
66 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1
67 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1
68 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1
69 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1
70 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1
71 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1
72 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1
73 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2
74 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2
75 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2
76 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2
77 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2
78 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2
79 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2
80 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2
81 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2
82 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
83 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
84 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
85 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
86 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
87 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
88 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
89 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
90 1 1 1 1 1 1 1 1 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
   29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53
1   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
2   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
3   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
4   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
5   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
6   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
7   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
8   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
9   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
10  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
11  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
12  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
13  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
14  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
15  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
16  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
17  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
18  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
19  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
20  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
21  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
22  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
23  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
24  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
25  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
26  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
27  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
28  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
29  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
30  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
31  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
32  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
33  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
34  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
35  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
36  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
37  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1
38  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1
39  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1
40  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1
41  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1
42  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1
43  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1
44  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1
45  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1
46  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
47  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
48  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
49  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
50  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
51  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
52  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
53  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
54  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
55  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
56  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
57  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
58  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
59  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
60  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
61  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
62  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
63  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
64  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
65  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
66  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
67  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
68  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
69  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
70  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
71  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
72  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
73  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
74  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
75  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
76  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
77  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
78  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
79  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
80  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
81  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2
82  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
83  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
84  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
85  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
86  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
87  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
88  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
89  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
90  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
   54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78
1   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
2   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
3   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
4   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
5   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
6   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
7   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
8   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
9   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
10  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
11  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
12  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
13  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
14  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
15  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
16  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
17  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
18  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
19  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1
20  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1
21  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1
22  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1
23  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1
24  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1
25  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1
26  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1
27  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  1  1  1  1  1  1
28  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2
29  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2
30  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2
31  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2
32  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2
33  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2
34  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2
35  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2
36  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2
37  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
38  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
39  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
40  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
41  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
42  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
43  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
44  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
45  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
46  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
47  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
48  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
49  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
50  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
51  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
52  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
53  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
54  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
55  2  4  4  4  4  4  4  4  4  4  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
56  2  4  4  4  4  4  4  4  4  4  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
57  2  4  4  4  4  4  4  4  4  4  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
58  2  4  4  4  4  4  4  4  4  4  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
59  2  4  4  4  4  4  4  4  4  4  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
60  2  4  4  4  4  4  4  4  4  4  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
61  2  4  4  4  4  4  4  4  4  4  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
62  2  4  4  4  4  4  4  4  4  4  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
63  2  4  4  4  4  4  4  4  4  4  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
64  2  2  2  2  2  2  2  2  2  2  4  4  4  4  4  4  4  4  4  2  2  2  2  2  2
65  2  2  2  2  2  2  2  2  2  2  4  4  4  4  4  4  4  4  4  2  2  2  2  2  2
66  2  2  2  2  2  2  2  2  2  2  4  4  4  4  4  4  4  4  4  2  2  2  2  2  2
67  2  2  2  2  2  2  2  2  2  2  4  4  4  4  4  4  4  4  4  2  2  2  2  2  2
68  2  2  2  2  2  2  2  2  2  2  4  4  4  4  4  4  4  4  4  2  2  2  2  2  2
69  2  2  2  2  2  2  2  2  2  2  4  4  4  4  4  4  4  4  4  2  2  2  2  2  2
70  2  2  2  2  2  2  2  2  2  2  4  4  4  4  4  4  4  4  4  2  2  2  2  2  2
71  2  2  2  2  2  2  2  2  2  2  4  4  4  4  4  4  4  4  4  2  2  2  2  2  2
72  2  2  2  2  2  2  2  2  2  2  4  4  4  4  4  4  4  4  4  2  2  2  2  2  2
73  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  4  4  4  4  4  4
74  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  4  4  4  4  4  4
75  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  4  4  4  4  4  4
76  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  4  4  4  4  4  4
77  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  4  4  4  4  4  4
78  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  4  4  4  4  4  4
79  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  4  4  4  4  4  4
80  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  4  4  4  4  4  4
81  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  4  4  4  4  4  4
82  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
83  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
84  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
85  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
86  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
87  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
88  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
89  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
90  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
   79 80 81 82 83 84 85 86 87 88 89 90
1   1  1  1  1  1  1  1  1  1  1  1  1
2   1  1  1  1  1  1  1  1  1  1  1  1
3   1  1  1  1  1  1  1  1  1  1  1  1
4   1  1  1  1  1  1  1  1  1  1  1  1
5   1  1  1  1  1  1  1  1  1  1  1  1
6   1  1  1  1  1  1  1  1  1  1  1  1
7   1  1  1  1  1  1  1  1  1  1  1  1
8   1  1  1  1  1  1  1  1  1  1  1  1
9   1  1  1  1  1  1  1  1  1  1  1  1
10  1  1  1  1  1  1  1  1  1  1  1  1
11  1  1  1  1  1  1  1  1  1  1  1  1
12  1  1  1  1  1  1  1  1  1  1  1  1
13  1  1  1  1  1  1  1  1  1  1  1  1
14  1  1  1  1  1  1  1  1  1  1  1  1
15  1  1  1  1  1  1  1  1  1  1  1  1
16  1  1  1  1  1  1  1  1  1  1  1  1
17  1  1  1  1  1  1  1  1  1  1  1  1
18  1  1  1  1  1  1  1  1  1  1  1  1
19  1  1  1  1  1  1  1  1  1  1  1  1
20  1  1  1  1  1  1  1  1  1  1  1  1
21  1  1  1  1  1  1  1  1  1  1  1  1
22  1  1  1  1  1  1  1  1  1  1  1  1
23  1  1  1  1  1  1  1  1  1  1  1  1
24  1  1  1  1  1  1  1  1  1  1  1  1
25  1  1  1  1  1  1  1  1  1  1  1  1
26  1  1  1  1  1  1  1  1  1  1  1  1
27  1  1  1  1  1  1  1  1  1  1  1  1
28  2  2  2  1  1  1  1  1  1  1  1  1
29  2  2  2  1  1  1  1  1  1  1  1  1
30  2  2  2  1  1  1  1  1  1  1  1  1
31  2  2  2  1  1  1  1  1  1  1  1  1
32  2  2  2  1  1  1  1  1  1  1  1  1
33  2  2  2  1  1  1  1  1  1  1  1  1
34  2  2  2  1  1  1  1  1  1  1  1  1
35  2  2  2  1  1  1  1  1  1  1  1  1
36  2  2  2  1  1  1  1  1  1  1  1  1
37  1  1  1  2  2  2  2  2  2  2  2  2
38  1  1  1  2  2  2  2  2  2  2  2  2
39  1  1  1  2  2  2  2  2  2  2  2  2
40  1  1  1  2  2  2  2  2  2  2  2  2
41  1  1  1  2  2  2  2  2  2  2  2  2
42  1  1  1  2  2  2  2  2  2  2  2  2
43  1  1  1  2  2  2  2  2  2  2  2  2
44  1  1  1  2  2  2  2  2  2  2  2  2
45  1  1  1  2  2  2  2  2  2  2  2  2
46  2  2  2  2  2  2  2  2  2  2  2  2
47  2  2  2  2  2  2  2  2  2  2  2  2
48  2  2  2  2  2  2  2  2  2  2  2  2
49  2  2  2  2  2  2  2  2  2  2  2  2
50  2  2  2  2  2  2  2  2  2  2  2  2
51  2  2  2  2  2  2  2  2  2  2  2  2
52  2  2  2  2  2  2  2  2  2  2  2  2
53  2  2  2  2  2  2  2  2  2  2  2  2
54  2  2  2  2  2  2  2  2  2  2  2  2
55  2  2  2  2  2  2  2  2  2  2  2  2
56  2  2  2  2  2  2  2  2  2  2  2  2
57  2  2  2  2  2  2  2  2  2  2  2  2
58  2  2  2  2  2  2  2  2  2  2  2  2
59  2  2  2  2  2  2  2  2  2  2  2  2
60  2  2  2  2  2  2  2  2  2  2  2  2
61  2  2  2  2  2  2  2  2  2  2  2  2
62  2  2  2  2  2  2  2  2  2  2  2  2
63  2  2  2  2  2  2  2  2  2  2  2  2
64  2  2  2  2  2  2  2  2  2  2  2  2
65  2  2  2  2  2  2  2  2  2  2  2  2
66  2  2  2  2  2  2  2  2  2  2  2  2
67  2  2  2  2  2  2  2  2  2  2  2  2
68  2  2  2  2  2  2  2  2  2  2  2  2
69  2  2  2  2  2  2  2  2  2  2  2  2
70  2  2  2  2  2  2  2  2  2  2  2  2
71  2  2  2  2  2  2  2  2  2  2  2  2
72  2  2  2  2  2  2  2  2  2  2  2  2
73  4  4  4  2  2  2  2  2  2  2  2  2
74  4  4  4  2  2  2  2  2  2  2  2  2
75  4  4  4  2  2  2  2  2  2  2  2  2
76  4  4  4  2  2  2  2  2  2  2  2  2
77  4  4  4  2  2  2  2  2  2  2  2  2
78  4  4  4  2  2  2  2  2  2  2  2  2
79  4  4  4  2  2  2  2  2  2  2  2  2
80  4  4  4  2  2  2  2  2  2  2  2  2
81  4  4  4  2  2  2  2  2  2  2  2  2
82  2  2  2  4  4  4  4  4  4  4  4  4
83  2  2  2  4  4  4  4  4  4  4  4  4
84  2  2  2  4  4  4  4  4  4  4  4  4
85  2  2  2  4  4  4  4  4  4  4  4  4
86  2  2  2  4  4  4  4  4  4  4  4  4
87  2  2  2  4  4  4  4  4  4  4  4  4
88  2  2  2  4  4  4  4  4  4  4  4  4
89  2  2  2  4  4  4  4  4  4  4  4  4
90  2  2  2  4  4  4  4  4  4  4  4  4
> 
> diag( design_X %*% solve(t(design_X) %*% design_X) %*% t(design_X) )
        1         2         3         4         5         6         7         8 
0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 
        9        10        11        12        13        14        15        16 
0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 
       17        18        19        20        21        22        23        24 
0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 
       25        26        27        28        29        30        31        32 
0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 
       33        34        35        36        37        38        39        40 
0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 
       41        42        43        44        45        46        47        48 
0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 
       49        50        51        52        53        54        55        56 
0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 
       57        58        59        60        61        62        63        64 
0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 
       65        66        67        68        69        70        71        72 
0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 
       73        74        75        76        77        78        79        80 
0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 
       81        82        83        84        85        86        87        88 
0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 
       89        90 
0.1111111 0.1111111 
> 
> summary(mod_test)
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errf + (1 | img)
   Data: tmp_dat

REML criterion at convergence: -343.6

Scaled residuals: 
     Min       1Q   Median       3Q      Max 
-1.86740 -0.60718  0.04671  0.54742  3.01380 

Random effects:
 Groups   Name        Variance  Std.Dev.
 img      (Intercept) 0.0005014 0.02239 
 Residual             0.0004748 0.02179 
Number of obs: 90, groups:  img, 9

Fixed effects:
               Estimate Std. Error t value
(Intercept)     0.07275    0.01041   6.985
DLTRUE          0.02189    0.01027   2.131
errf2.5         0.04464    0.01027   4.345
errf5           0.13168    0.01027  12.820
errf7.5         0.22260    0.01027  21.670
errf10          0.31349    0.01027  30.519
DLTRUE:errf2.5 -0.04440    0.01453  -3.057
DLTRUE:errf5   -0.08944    0.01453  -6.157
DLTRUE:errf7.5 -0.13367    0.01453  -9.202
DLTRUE:errf10  -0.14117    0.01453  -9.718

Correlation of Fixed Effects:
            (Intr) DLTRUE err2.5 errf5  err7.5 errf10 DLTRUE:2 DLTRUE:5
DLTRUE      -0.493                                                     
errf2.5     -0.493  0.500                                              
errf5       -0.493  0.500  0.500                                       
errf7.5     -0.493  0.500  0.500  0.500                                
errf10      -0.493  0.500  0.500  0.500  0.500                         
DLTRUE:r2.5  0.349 -0.707 -0.707 -0.354 -0.354 -0.354                  
DLTRUE:rrf5  0.349 -0.707 -0.354 -0.707 -0.354 -0.354  0.500           
DLTRUE:r7.5  0.349 -0.707 -0.354 -0.354 -0.707 -0.354  0.500    0.500  
DLTRUE:rr10  0.349 -0.707 -0.354 -0.354 -0.354 -0.707  0.500    0.500  
            DLTRUE:7
DLTRUE              
errf2.5             
errf5               
errf7.5             
errf10              
DLTRUE:r2.5         
DLTRUE:rrf5         
DLTRUE:r7.5         
DLTRUE:rr10  0.500  
> coef(mod_test)$img
   (Intercept)     DLTRUE    errf2.5     errf5  errf7.5    errf10
V1  0.07297726 0.02188898 0.04463515 0.1316835 0.222597 0.3134881
V2  0.06683549 0.02188898 0.04463515 0.1316835 0.222597 0.3134881
V3  0.08994601 0.02188898 0.04463515 0.1316835 0.222597 0.3134881
V4  0.06133793 0.02188898 0.04463515 0.1316835 0.222597 0.3134881
V5  0.05613463 0.02188898 0.04463515 0.1316835 0.222597 0.3134881
V6  0.09114943 0.02188898 0.04463515 0.1316835 0.222597 0.3134881
V7  0.03914062 0.02188898 0.04463515 0.1316835 0.222597 0.3134881
V8  0.06676927 0.02188898 0.04463515 0.1316835 0.222597 0.3134881
V9  0.11047566 0.02188898 0.04463515 0.1316835 0.222597 0.3134881
   DLTRUE:errf2.5 DLTRUE:errf5 DLTRUE:errf7.5 DLTRUE:errf10
V1    -0.04440421  -0.08944367     -0.1336694    -0.1411735
V2    -0.04440421  -0.08944367     -0.1336694    -0.1411735
V3    -0.04440421  -0.08944367     -0.1336694    -0.1411735
V4    -0.04440421  -0.08944367     -0.1336694    -0.1411735
V5    -0.04440421  -0.08944367     -0.1336694    -0.1411735
V6    -0.04440421  -0.08944367     -0.1336694    -0.1411735
V7    -0.04440421  -0.08944367     -0.1336694    -0.1411735
V8    -0.04440421  -0.08944367     -0.1336694    -0.1411735
V9    -0.04440421  -0.08944367     -0.1336694    -0.1411735
> 
> 
> 
> 
> 
> (mod_test <- lmer(vals ~ DL * errf + (errf | img), tmp_dat))
boundary (singular) fit: see help('isSingular')
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errf + (errf | img)
   Data: tmp_dat
REML criterion at convergence: -401.6043
Random effects:
 Groups   Name        Std.Dev. Corr                   
 img      (Intercept) 0.02675                         
          errf2.5     0.00346  -1.00                  
          errf5       0.01873  -0.56  0.56            
          errf7.5     0.02906  -0.52  0.52  1.00      
          errf10      0.04533  -0.49  0.49  1.00  1.00
 Residual             0.01239                         
Number of obs: 90, groups:  img, 9
Fixed Effects:
   (Intercept)          DLTRUE         errf2.5           errf5         errf7.5  
       0.07275         0.02189         0.04464         0.13168         0.22260  
        errf10  DLTRUE:errf2.5    DLTRUE:errf5  DLTRUE:errf7.5   DLTRUE:errf10  
       0.31349        -0.04440        -0.08944        -0.13367        -0.14117  
optimizer (nloptwrap) convergence code: 0 (OK) ; 0 optimizer warnings; 1 lme4 warnings 
> emmeans_1 <- emmeans(mod_test, ~ DL | errf)
> pairs(emmeans_1)
errf = 1:
 contrast     estimate      SE df t.ratio p.value
 FALSE - TRUE  -0.0219 0.00584 40  -3.747  0.0006

errf = 2.5:
 contrast     estimate      SE df t.ratio p.value
 FALSE - TRUE   0.0225 0.00584 40   3.854  0.0004

errf = 5:
 contrast     estimate      SE df t.ratio p.value
 FALSE - TRUE   0.0676 0.00584 40  11.564  <.0001

errf = 7.5:
 contrast     estimate      SE df t.ratio p.value
 FALSE - TRUE   0.1118 0.00584 40  19.135  <.0001

errf = 10:
 contrast     estimate      SE df t.ratio p.value
 FALSE - TRUE   0.1193 0.00584 40  20.420  <.0001

Degrees-of-freedom method: kenward-roger 
> 
> summary(mod_test)
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errf + (errf | img)
   Data: tmp_dat

REML criterion at convergence: -401.6

Scaled residuals: 
     Min       1Q   Median       3Q      Max 
-3.11767 -0.56654 -0.08351  0.54710  2.99000 

Random effects:
 Groups   Name        Variance  Std.Dev. Corr                   
 img      (Intercept) 7.156e-04 0.02675                         
          errf2.5     1.197e-05 0.00346  -1.00                  
          errf5       3.507e-04 0.01873  -0.56  0.56            
          errf7.5     8.447e-04 0.02906  -0.52  0.52  1.00      
          errf10      2.055e-03 0.04533  -0.49  0.49  1.00  1.00
 Residual             1.536e-04 0.01239                         
Number of obs: 90, groups:  img, 9

Fixed effects:
                Estimate Std. Error t value
(Intercept)     0.072752   0.009827   7.403
DLTRUE          0.021889   0.005842   3.747
errf2.5         0.044635   0.005954   7.496
errf5           0.131683   0.008549  15.403
errf7.5         0.222597   0.011313  19.677
errf10          0.313488   0.016199  19.352
DLTRUE:errf2.5 -0.044404   0.008261  -5.375
DLTRUE:errf5   -0.089444   0.008261 -10.827
DLTRUE:errf7.5 -0.133669   0.008261 -16.180
DLTRUE:errf10  -0.141174   0.008261 -17.089

Correlation of Fixed Effects:
            (Intr) DLTRUE err2.5 errf5  err7.5 errf10 DLTRUE:2 DLTRUE:5
DLTRUE      -0.297                                                     
errf2.5     -0.467  0.491                                              
errf5       -0.573  0.342  0.414                                       
errf7.5     -0.555  0.258  0.339  0.801                                
errf10      -0.519  0.180  0.265  0.802  0.891                         
DLTRUE:r2.5  0.210 -0.707 -0.694 -0.242 -0.183 -0.127                  
DLTRUE:rrf5  0.210 -0.707 -0.347 -0.483 -0.183 -0.127  0.500           
DLTRUE:r7.5  0.210 -0.707 -0.347 -0.242 -0.365 -0.127  0.500    0.500  
DLTRUE:rr10  0.210 -0.707 -0.347 -0.242 -0.183 -0.255  0.500    0.500  
            DLTRUE:7
DLTRUE              
errf2.5             
errf5               
errf7.5             
errf10              
DLTRUE:r2.5         
DLTRUE:rrf5         
DLTRUE:r7.5         
DLTRUE:rr10  0.500  
optimizer (nloptwrap) convergence code: 0 (OK)
boundary (singular) fit: see help('isSingular')

> coef(mod_test)$img
   (Intercept)     DLTRUE    errf2.5     errf5   errf7.5    errf10
V1  0.05459081 0.02188898 0.04698409 0.1500366 0.2508244 0.3571516
V2  0.05577934 0.02188898 0.04683036 0.1425089 0.2388517 0.3381733
V3  0.06664714 0.02188898 0.04542473 0.1555898 0.2604728 0.3733615
V4  0.06744894 0.02188898 0.04532102 0.1251838 0.2118600 0.2960202
V5  0.06934282 0.02188898 0.04507607 0.1178945 0.2003133 0.2777697
V6  0.07383484 0.02188898 0.04449508 0.1496377 0.2514003 0.3594227
V7  0.05488683 0.02188898 0.04694580 0.1146582 0.1942216 0.2670538
V8  0.07295267 0.02188898 0.04460917 0.1252650 0.2123372 0.2971673
V9  0.13928293 0.02188898 0.03603005 0.1043769 0.1830919 0.2552727
   DLTRUE:errf2.5 DLTRUE:errf5 DLTRUE:errf7.5 DLTRUE:errf10
V1    -0.04440421  -0.08944367     -0.1336694    -0.1411735
V2    -0.04440421  -0.08944367     -0.1336694    -0.1411735
V3    -0.04440421  -0.08944367     -0.1336694    -0.1411735
V4    -0.04440421  -0.08944367     -0.1336694    -0.1411735
V5    -0.04440421  -0.08944367     -0.1336694    -0.1411735
V6    -0.04440421  -0.08944367     -0.1336694    -0.1411735
V7    -0.04440421  -0.08944367     -0.1336694    -0.1411735
V8    -0.04440421  -0.08944367     -0.1336694    -0.1411735
V9    -0.04440421  -0.08944367     -0.1336694    -0.1411735
> # Makes more sense without singularity????
> 
> 
> 
> (mod_test <- lmer(vals ~ DL * errs + (DL | img), tmp_dat))
boundary (singular) fit: see help('isSingular')
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errs + (DL | img)
   Data: tmp_dat
REML criterion at convergence: -357.2467
Random effects:
 Groups   Name        Std.Dev. Corr 
 img      (Intercept) 0.024243      
          DLTRUE      0.004226 -1.00
 Residual             0.024332      
Number of obs: 90, groups:  img, 9
Fixed Effects:
(Intercept)       DLTRUE         errs  DLTRUE:errs  
    0.03281      0.02281      0.03508     -0.01590  
optimizer (nloptwrap) convergence code: 0 (OK) ; 0 optimizer warnings; 1 lme4 warnings 
> # Singular
> 
> summary(mod_test)
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errs + (DL | img)
   Data: tmp_dat

REML criterion at convergence: -357.2

Scaled residuals: 
    Min      1Q  Median      3Q     Max 
-1.7216 -0.6032 -0.2002  0.4137  2.7063 

Random effects:
 Groups   Name        Variance  Std.Dev. Corr 
 img      (Intercept) 5.877e-04 0.024243      
          DLTRUE      1.786e-05 0.004226 -1.00
 Residual             5.921e-04 0.024332      
Number of obs: 90, groups:  img, 9

Fixed effects:
             Estimate Std. Error t value
(Intercept)  0.032807   0.010575   3.102
DLTRUE       0.022813   0.009749   2.340
errs         0.035082   0.001111  31.578
DLTRUE:errs -0.015897   0.001571 -10.118

Correlation of Fixed Effects:
            (Intr) DLTRUE errs  
DLTRUE      -0.562              
errs        -0.546  0.593       
DLTRUE:errs  0.386 -0.838 -0.707
optimizer (nloptwrap) convergence code: 0 (OK)
boundary (singular) fit: see help('isSingular')

> coef(mod_test)$img
    (Intercept)     DLTRUE       errs DLTRUE:errs
V1  0.033465689 0.02269864 0.03508188 -0.01589667
V2  0.026777242 0.02386448 0.03508188 -0.01589667
V3  0.051634715 0.01953165 0.03508188 -0.01589667
V4  0.020412883 0.02497383 0.03508188 -0.01589667
V5  0.014734651 0.02596359 0.03508188 -0.01589667
V6  0.053639613 0.01918218 0.03508188 -0.01589667
V7 -0.003390628 0.02912296 0.03508188 -0.01589667
V8  0.025981528 0.02400318 0.03508188 -0.01589667
V9  0.072005244 0.01598092 0.03508188 -0.01589667
> 
> 
> 
> 
> 
> (mod_test <- lmer(vals ~ DL * errs + (DL * errs | img), tmp_dat))
boundary (singular) fit: see help('isSingular')
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errs + (DL * errs | img)
   Data: tmp_dat
REML criterion at convergence: -410.814
Random effects:
 Groups   Name        Std.Dev. Corr             
 img      (Intercept) 0.027158                  
          DLTRUE      0.009519  0.52            
          errs        0.006653 -0.67  0.24      
          DLTRUE:errs 0.003402  0.30 -0.65 -0.89
 Residual             0.014945                  
Number of obs: 90, groups:  img, 9
Fixed Effects:
(Intercept)       DLTRUE         errs  DLTRUE:errs  
    0.03281      0.02281      0.03508     -0.01590  
optimizer (nloptwrap) convergence code: 0 (OK) ; 0 optimizer warnings; 1 lme4 warnings 
> 
> summary(mod_test)
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errs + (DL * errs | img)
   Data: tmp_dat

REML criterion at convergence: -410.8

Scaled residuals: 
     Min       1Q   Median       3Q      Max 
-3.04718 -0.59487 -0.09582  0.40281  2.21163 

Random effects:
 Groups   Name        Variance  Std.Dev. Corr             
 img      (Intercept) 7.376e-04 0.027158                  
          DLTRUE      9.061e-05 0.009519  0.52            
          errs        4.426e-05 0.006653 -0.67  0.24      
          DLTRUE:errs 1.157e-05 0.003402  0.30 -0.65 -0.89
 Residual             2.233e-04 0.014945                  
Number of obs: 90, groups:  img, 9

Fixed effects:
             Estimate Std. Error t value
(Intercept)  0.032807   0.009975   3.289
DLTRUE       0.022813   0.006721   3.394
errs         0.035082   0.002320  15.119
DLTRUE:errs -0.015897   0.001489 -10.676

Correlation of Fixed Effects:
            (Intr) DLTRUE errs  
DLTRUE      -0.041              
errs        -0.688  0.265       
DLTRUE:errs  0.371 -0.718 -0.785
optimizer (nloptwrap) convergence code: 0 (OK)
boundary (singular) fit: see help('isSingular')

> coef(mod_test)$img
   (Intercept)     DLTRUE       errs DLTRUE:errs
V1  0.01012219 0.02076541 0.04059942 -0.01774688
V2  0.01547544 0.01881634 0.03777293 -0.01630847
V3  0.01496773 0.02736870 0.04358167 -0.01998247
V4  0.03460916 0.01787866 0.03172121 -0.01373415
V5  0.04010499 0.01636055 0.02910108 -0.01244983
V6  0.01648001 0.03067457 0.04383912 -0.02074509
V7  0.03033734 0.01099588 0.02755501 -0.01105751
V8  0.03734503 0.02165803 0.03264655 -0.01477387
V9  0.09581904 0.04080329 0.02891996 -0.01627175
> # Singular
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> tmp_dat <- all_dat %>%
+     filter(measures == "RMSPE") %>%
+     filter(method == "LS") %>%
+     pivot_longer(!c(DL, measures, errs, method), names_to = "img", values_to = "vals") 
> 
> 
> tmp_dat$errf <- factor(tmp_dat$errs)
> (mod_test <- lmer(vals ~ DL * errf + (1 | img), tmp_dat))   # random effect for intercept
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errf + (1 | img)
   Data: tmp_dat
REML criterion at convergence: -364.1174
Random effects:
 Groups   Name        Std.Dev.
 img      (Intercept) 0.05258 
 Residual             0.01727 
Number of obs: 90, groups:  img, 9
Fixed Effects:
   (Intercept)          DLTRUE         errf2.5           errf5         errf7.5  
       0.09903         0.03168         0.05207         0.15832         0.27005  
        errf10  DLTRUE:errf2.5    DLTRUE:errf5  DLTRUE:errf7.5   DLTRUE:errf10  
       0.38148        -0.05494        -0.11007        -0.16308        -0.17344  
> 
> emmeans_1 <- emmeans(mod_test, ~ DL | errf)
> pairs(emmeans_1)
errf = 1:
 contrast     estimate      SE df t.ratio p.value
 FALSE - TRUE  -0.0317 0.00814 72  -3.892  0.0002

errf = 2.5:
 contrast     estimate      SE df t.ratio p.value
 FALSE - TRUE   0.0233 0.00814 72   2.858  0.0056

errf = 5:
 contrast     estimate      SE df t.ratio p.value
 FALSE - TRUE   0.0784 0.00814 72   9.631  <.0001

errf = 7.5:
 contrast     estimate      SE df t.ratio p.value
 FALSE - TRUE   0.1314 0.00814 72  16.145  <.0001

errf = 10:
 contrast     estimate      SE df t.ratio p.value
 FALSE - TRUE   0.1418 0.00814 72  17.418  <.0001

Degrees-of-freedom method: kenward-roger 
> xtable::xtable(pairs(emmeans_1))
% latex table generated in R 4.2.0 by xtable 1.8-4 package
% Tue Jun 21 00:32:48 2022
\begin{table}[ht]
\centering
\begin{tabular}{lrrrrl}
  \hline
contrast & estimate & SE & df & t.ratio & p.value \\ 
  \hline
\multicolumn{6}{l}{errf = 1}\\
FALSE - TRUE & -0.0317 & 0.0081 & 72 & -3.892 & 0.0002 \\ 
   \hline
\multicolumn{6}{l}{errf = 2.5}\\
FALSE - TRUE & 0.0233 & 0.0081 & 72 & 2.858 & 0.0056 \\ 
   \hline
\multicolumn{6}{l}{errf = 5}\\
FALSE - TRUE & 0.0784 & 0.0081 & 72 & 9.631 & $<$.0001 \\ 
   \hline
\multicolumn{6}{l}{errf = 7.5}\\
FALSE - TRUE & 0.1314 & 0.0081 & 72 & 16.145 & $<$.0001 \\ 
   \hline
\multicolumn{6}{l}{errf = 10}\\
FALSE - TRUE & 0.1418 & 0.0081 & 72 & 17.418 & $<$.0001 \\ 
   \hline
\multicolumn{6}{l}{{\footnotesize Degrees-of-freedom method: kenward-roger}}\\
\end{tabular}
\end{table}
> 
> library(ggResidpanel)
> resid_panel(mod_test)
> 
> p_RMSPE <- resid_panel(mod_test, type='response', plots = "qq") + 
+     theme_minimal() + theme(panel.background = element_rect(fill = "white", colour = "white", size = 0.5, linetype = "solid"), 
+                                 plot.background = element_rect(fill = "white"))
> 
> p_RMSPE
> 
> 
> summary(mod_test)
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errf + (1 | img)
   Data: tmp_dat

REML criterion at convergence: -364.1

Scaled residuals: 
    Min      1Q  Median      3Q     Max 
-1.8232 -0.5221  0.0541  0.5122  2.2380 

Random effects:
 Groups   Name        Variance  Std.Dev.
 img      (Intercept) 0.0027651 0.05258 
 Residual             0.0002981 0.01727 
Number of obs: 90, groups:  img, 9

Fixed effects:
                Estimate Std. Error t value
(Intercept)     0.099032   0.018449   5.368
DLTRUE          0.031677   0.008139   3.892
errf2.5         0.052072   0.008139   6.398
errf5           0.158318   0.008139  19.451
errf7.5         0.270045   0.008139  33.179
errf10          0.381481   0.008139  46.870
DLTRUE:errf2.5 -0.054941   0.011510  -4.773
DLTRUE:errf5   -0.110065   0.011510  -9.562
DLTRUE:errf7.5 -0.163080   0.011510 -14.168
DLTRUE:errf10  -0.173443   0.011510 -15.068

Correlation of Fixed Effects:
            (Intr) DLTRUE err2.5 errf5  err7.5 errf10 DLTRUE:2 DLTRUE:5
DLTRUE      -0.221                                                     
errf2.5     -0.221  0.500                                              
errf5       -0.221  0.500  0.500                                       
errf7.5     -0.221  0.500  0.500  0.500                                
errf10      -0.221  0.500  0.500  0.500  0.500                         
DLTRUE:r2.5  0.156 -0.707 -0.707 -0.354 -0.354 -0.354                  
DLTRUE:rrf5  0.156 -0.707 -0.354 -0.707 -0.354 -0.354  0.500           
DLTRUE:r7.5  0.156 -0.707 -0.354 -0.354 -0.707 -0.354  0.500    0.500  
DLTRUE:rr10  0.156 -0.707 -0.354 -0.354 -0.354 -0.707  0.500    0.500  
            DLTRUE:7
DLTRUE              
errf2.5             
errf5               
errf7.5             
errf10              
DLTRUE:r2.5         
DLTRUE:rrf5         
DLTRUE:r7.5         
DLTRUE:rr10  0.500  
> coef(mod_test)$img
   (Intercept)     DLTRUE    errf2.5     errf5   errf7.5    errf10
V1  0.08755356 0.03167731 0.05207157 0.1583178 0.2700455 0.3814811
V2  0.09918137 0.03167731 0.05207157 0.1583178 0.2700455 0.3814811
V3  0.05292517 0.03167731 0.05207157 0.1583178 0.2700455 0.3814811
V4  0.09058508 0.03167731 0.05207157 0.1583178 0.2700455 0.3814811
V5  0.12221830 0.03167731 0.05207157 0.1583178 0.2700455 0.3814811
V6  0.03875089 0.03167731 0.05207157 0.1583178 0.2700455 0.3814811
V7  0.06580581 0.03167731 0.05207157 0.1583178 0.2700455 0.3814811
V8  0.11710921 0.03167731 0.05207157 0.1583178 0.2700455 0.3814811
V9  0.21715680 0.03167731 0.05207157 0.1583178 0.2700455 0.3814811
   DLTRUE:errf2.5 DLTRUE:errf5 DLTRUE:errf7.5 DLTRUE:errf10
V1    -0.05494069   -0.1100653       -0.16308    -0.1734425
V2    -0.05494069   -0.1100653       -0.16308    -0.1734425
V3    -0.05494069   -0.1100653       -0.16308    -0.1734425
V4    -0.05494069   -0.1100653       -0.16308    -0.1734425
V5    -0.05494069   -0.1100653       -0.16308    -0.1734425
V6    -0.05494069   -0.1100653       -0.16308    -0.1734425
V7    -0.05494069   -0.1100653       -0.16308    -0.1734425
V8    -0.05494069   -0.1100653       -0.16308    -0.1734425
V9    -0.05494069   -0.1100653       -0.16308    -0.1734425
> 
> 
> (mod_test <- lmer(vals ~ DL * errs + (DL | img), tmp_dat))
boundary (singular) fit: see help('isSingular')
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errs + (DL | img)
   Data: tmp_dat
REML criterion at convergence: -353.0115
Random effects:
 Groups   Name        Std.Dev. Corr
 img      (Intercept) 0.050640     
          DLTRUE      0.003448 1.00
 Residual             0.023008     
Number of obs: 90, groups:  img, 9
Fixed Effects:
(Intercept)       DLTRUE         errs  DLTRUE:errs  
    0.04898      0.03257      0.04278     -0.01946  
optimizer (nloptwrap) convergence code: 0 (OK) ; 0 optimizer warnings; 1 lme4 warnings 
> # Singular
> summary(mod_test)
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errs + (DL | img)
   Data: tmp_dat

REML criterion at convergence: -353

Scaled residuals: 
    Min      1Q  Median      3Q     Max 
-1.8781 -0.6613 -0.2234  0.6405  2.3835 

Random effects:
 Groups   Name        Variance  Std.Dev. Corr
 img      (Intercept) 2.564e-03 0.050640     
          DLTRUE      1.189e-05 0.003448 1.00
 Residual             5.294e-04 0.023008     
Number of obs: 90, groups:  img, 9

Fixed effects:
             Estimate Std. Error t value
(Intercept)  0.048980   0.018070   2.711
DLTRUE       0.032567   0.009194   3.542
errs         0.042776   0.001050  40.720
DLTRUE:errs -0.019461   0.001486 -13.099

Correlation of Fixed Effects:
            (Intr) DLTRUE errs  
DLTRUE      -0.134              
errs        -0.302  0.594       
DLTRUE:errs  0.214 -0.840 -0.707
optimizer (nloptwrap) convergence code: 0 (OK)
boundary (singular) fit: see help('isSingular')

> coef(mod_test)$img
    (Intercept)     DLTRUE       errs DLTRUE:errs
V1  0.037775818 0.03180445 0.04277593  -0.0194607
V2  0.048874193 0.03256002 0.04277593  -0.0194607
V3  0.004885351 0.02956530 0.04277593  -0.0194607
V4  0.040936981 0.03201966 0.04277593  -0.0194607
V5  0.071136470 0.03407562 0.04277593  -0.0194607
V6 -0.008791907 0.02863417 0.04277593  -0.0194607
V7  0.017282714 0.03040930 0.04277593  -0.0194607
V8  0.066349785 0.03374974 0.04277593  -0.0194607
V9  0.162371881 0.04028684 0.04277593  -0.0194607
> 
> 
> (mod_test <- lmer(vals ~ DL * errs + (errs | img), tmp_dat))
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errs + (errs | img)
   Data: tmp_dat
REML criterion at convergence: -369.0676
Random effects:
 Groups   Name        Std.Dev. Corr 
 img      (Intercept) 0.05542       
          errs        0.00396  -0.32
 Residual             0.01900       
Number of obs: 90, groups:  img, 9
Fixed Effects:
(Intercept)       DLTRUE         errs  DLTRUE:errs  
    0.04898      0.03257      0.04278     -0.01946  
> summary(mod_test)
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errs + (errs | img)
   Data: tmp_dat

REML criterion at convergence: -369.1

Scaled residuals: 
     Min       1Q   Median       3Q      Max 
-1.68127 -0.66049 -0.08627  0.65489  2.39406 

Random effects:
 Groups   Name        Variance  Std.Dev. Corr 
 img      (Intercept) 3.071e-03 0.05542       
          errs        1.568e-05 0.00396  -0.32
 Residual             3.610e-04 0.01900       
Number of obs: 90, groups:  img, 9

Fixed effects:
             Estimate Std. Error t value
(Intercept)  0.048980   0.019226   2.548
DLTRUE       0.032567   0.007533   4.323
errs         0.042776   0.001579  27.082
DLTRUE:errs -0.019461   0.001227 -15.862

Correlation of Fixed Effects:
            (Intr) DLTRUE errs  
DLTRUE      -0.196              
errs        -0.388  0.329       
DLTRUE:errs  0.166 -0.847 -0.388
> coef(mod_test)$img
   (Intercept)     DLTRUE       errs DLTRUE:errs
V1 0.011328168 0.03256723 0.04782304  -0.0194607
V2 0.020409338 0.03256723 0.04830844  -0.0194607
V3 0.009000693 0.03256723 0.04161613  -0.0194607
V4 0.043825982 0.03256723 0.04214543  -0.0194607
V5 0.065345615 0.03256723 0.04407959  -0.0194607
V6 0.011459357 0.03256723 0.03841833  -0.0194607
V7 0.035562384 0.03256723 0.03897494  -0.0194607
V8 0.061438445 0.03256723 0.04385033  -0.0194607
V9 0.182451305 0.03256723 0.03976717  -0.0194607
> # Makes more sense without singularity????
> 
> 
> (mod_test <- lmer(vals ~ DL * errs + (DL * errs | img), tmp_dat))
boundary (singular) fit: see help('isSingular')
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errs + (DL * errs | img)
   Data: tmp_dat
REML criterion at convergence: -374.4777
Random effects:
 Groups   Name        Std.Dev. Corr             
 img      (Intercept) 0.048925                  
          DLTRUE      0.013961  0.95            
          errs        0.004041 -0.11 -0.43      
          DLTRUE:errs 0.001446 -0.97 -0.85 -0.11
 Residual             0.018189                  
Number of obs: 90, groups:  img, 9
Fixed Effects:
(Intercept)       DLTRUE         errs  DLTRUE:errs  
    0.04898      0.03257      0.04278     -0.01946  
optimizer (nloptwrap) convergence code: 0 (OK) ; 0 optimizer warnings; 1 lme4 warnings 
> 
> summary(mod_test)
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errs + (DL * errs | img)
   Data: tmp_dat

REML criterion at convergence: -374.5

Scaled residuals: 
    Min      1Q  Median      3Q     Max 
-1.9734 -0.6862 -0.1660  0.6291  2.0602 

Random effects:
 Groups   Name        Variance  Std.Dev. Corr             
 img      (Intercept) 2.394e-03 0.048925                  
          DLTRUE      1.949e-04 0.013961  0.95            
          errs        1.633e-05 0.004041 -0.11 -0.43      
          DLTRUE:errs 2.090e-06 0.001446 -0.97 -0.85 -0.11
 Residual             3.308e-04 0.018189                  
Number of obs: 90, groups:  img, 9

Fixed effects:
             Estimate Std. Error t value
(Intercept)  0.048980   0.017087   2.867
DLTRUE       0.032567   0.008582   3.795
errs         0.042776   0.001582  27.032
DLTRUE:errs -0.019461   0.001269 -15.330

Correlation of Fixed Effects:
            (Intr) DLTRUE errs  
DLTRUE       0.312              
errs        -0.226  0.065       
DLTRUE:errs -0.188 -0.833 -0.380
optimizer (nloptwrap) convergence code: 0 (OK)
boundary (singular) fit: see help('isSingular')

> coef(mod_test)$img
   (Intercept)     DLTRUE       errs DLTRUE:errs
V1  0.01728172 0.01874889 0.04774194 -0.01892788
V2  0.02516801 0.01996674 0.04847504 -0.01922062
V3  0.01356008 0.02561824 0.04079499 -0.01825264
V4  0.04412102 0.03221525 0.04197096 -0.01925158
V5  0.06340335 0.03434882 0.04451196 -0.02002824
V6  0.01285647 0.02883323 0.03778237 -0.01798672
V7  0.03575871 0.03405795 0.03841450 -0.01871505
V8  0.06168859 0.03456958 0.04392198 -0.01992956
V9  0.16698333 0.06474640 0.04136966 -0.02283398
> # Singular
> 
> 
> 
> 
> 
> 
> tmp_dat <- all_dat %>%
+     filter(measures == "SSIM") %>%
+     filter(method == "LS") %>%
+     pivot_longer(!c(DL, measures, errs, method), names_to = "img", values_to = "vals") 
> 
> 
> tmp_dat$errf <- factor(tmp_dat$errs)
> (mod_test <- lmer(vals ~ DL * errf + (1 | img), tmp_dat))   # random effect for intercept
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errf + (1 | img)
   Data: tmp_dat
REML criterion at convergence: 290.4102
Random effects:
 Groups   Name        Std.Dev.
 img      (Intercept) 2.348   
 Residual             1.066   
Number of obs: 90, groups:  img, 9
Fixed Effects:
   (Intercept)          DLTRUE         errf2.5           errf5         errf7.5  
       98.2322         -0.7384         -3.3672         -9.4301        -15.0139  
        errf10  DLTRUE:errf2.5    DLTRUE:errf5  DLTRUE:errf7.5   DLTRUE:errf10  
      -19.9550          2.7858          6.3201          8.5540          8.2134  
> 
> emmeans_1 <- emmeans(mod_test, ~ DL | errf)
> pairs(emmeans_1)
errf = 1:
 contrast     estimate    SE df t.ratio p.value
 FALSE - TRUE    0.738 0.502 72   1.470  0.1460

errf = 2.5:
 contrast     estimate    SE df t.ratio p.value
 FALSE - TRUE   -2.047 0.502 72  -4.075  0.0001

errf = 5:
 contrast     estimate    SE df t.ratio p.value
 FALSE - TRUE   -5.582 0.502 72 -11.111  <.0001

errf = 7.5:
 contrast     estimate    SE df t.ratio p.value
 FALSE - TRUE   -7.816 0.502 72 -15.557  <.0001

errf = 10:
 contrast     estimate    SE df t.ratio p.value
 FALSE - TRUE   -7.475 0.502 72 -14.879  <.0001

Degrees-of-freedom method: kenward-roger 
> 
> library(ggResidpanel)
> resid_panel(mod_test)
> 
> p_SSIM <- resid_panel(mod_test, type='response', plots = "qq") + 
+     theme_minimal() + theme(panel.background = element_rect(fill = "white", colour = "white", size = 0.5, linetype = "solid"), 
+                                 plot.background = element_rect(fill = "white"))
> 
> p_SSIM
> 
> 
> summary(mod_test)
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errf + (1 | img)
   Data: tmp_dat

REML criterion at convergence: 290.4

Scaled residuals: 
     Min       1Q   Median       3Q      Max 
-2.05299 -0.58685 -0.03167  0.55741  2.23479 

Random effects:
 Groups   Name        Variance Std.Dev.
 img      (Intercept) 5.515    2.348   
 Residual             1.136    1.066   
Number of obs: 90, groups:  img, 9

Fixed effects:
               Estimate Std. Error t value
(Intercept)     98.2322     0.8596 114.274
DLTRUE          -0.7384     0.5024  -1.470
errf2.5         -3.3672     0.5024  -6.702
errf5           -9.4301     0.5024 -18.771
errf7.5        -15.0139     0.5024 -29.885
errf10         -19.9550     0.5024 -39.721
DLTRUE:errf2.5   2.7858     0.7105   3.921
DLTRUE:errf5     6.3201     0.7105   8.896
DLTRUE:errf7.5   8.5540     0.7105  12.040
DLTRUE:errf10    8.2134     0.7105  11.560

Correlation of Fixed Effects:
            (Intr) DLTRUE err2.5 errf5  err7.5 errf10 DLTRUE:2 DLTRUE:5
DLTRUE      -0.292                                                     
errf2.5     -0.292  0.500                                              
errf5       -0.292  0.500  0.500                                       
errf7.5     -0.292  0.500  0.500  0.500                                
errf10      -0.292  0.500  0.500  0.500  0.500                         
DLTRUE:r2.5  0.207 -0.707 -0.707 -0.354 -0.354 -0.354                  
DLTRUE:rrf5  0.207 -0.707 -0.354 -0.707 -0.354 -0.354  0.500           
DLTRUE:r7.5  0.207 -0.707 -0.354 -0.354 -0.707 -0.354  0.500    0.500  
DLTRUE:rr10  0.207 -0.707 -0.354 -0.354 -0.354 -0.707  0.500    0.500  
            DLTRUE:7
DLTRUE              
errf2.5             
errf5               
errf7.5             
errf10              
DLTRUE:r2.5         
DLTRUE:rrf5         
DLTRUE:r7.5         
DLTRUE:rr10  0.500  
> coef(mod_test)$img
   (Intercept)     DLTRUE   errf2.5     errf5   errf7.5    errf10
V1    99.82583 -0.7383913 -3.367176 -9.430074 -15.01388 -19.95499
V2    99.38179 -0.7383913 -3.367176 -9.430074 -15.01388 -19.95499
V3   100.09866 -0.7383913 -3.367176 -9.430074 -15.01388 -19.95499
V4    97.13816 -0.7383913 -3.367176 -9.430074 -15.01388 -19.95499
V5    93.95982 -0.7383913 -3.367176 -9.430074 -15.01388 -19.95499
V6    96.36648 -0.7383913 -3.367176 -9.430074 -15.01388 -19.95499
V7    96.49031 -0.7383913 -3.367176 -9.430074 -15.01388 -19.95499
V8   100.85820 -0.7383913 -3.367176 -9.430074 -15.01388 -19.95499
V9    99.97060 -0.7383913 -3.367176 -9.430074 -15.01388 -19.95499
   DLTRUE:errf2.5 DLTRUE:errf5 DLTRUE:errf7.5 DLTRUE:errf10
V1       2.785756     6.320131       8.554038      8.213401
V2       2.785756     6.320131       8.554038      8.213401
V3       2.785756     6.320131       8.554038      8.213401
V4       2.785756     6.320131       8.554038      8.213401
V5       2.785756     6.320131       8.554038      8.213401
V6       2.785756     6.320131       8.554038      8.213401
V7       2.785756     6.320131       8.554038      8.213401
V8       2.785756     6.320131       8.554038      8.213401
V9       2.785756     6.320131       8.554038      8.213401
> 
> 
> (mod_test <- lmer(vals ~ DL * errs + (DL | img), tmp_dat))
boundary (singular) fit: see help('isSingular')
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errs + (DL | img)
   Data: tmp_dat
REML criterion at convergence: 330.4573
Random effects:
 Groups   Name        Std.Dev. Corr 
 img      (Intercept) 2.5440        
          DLTRUE      0.4085   -1.00
 Residual             1.2446        
Number of obs: 90, groups:  img, 9
Fixed Effects:
(Intercept)       DLTRUE         errs  DLTRUE:errs  
   100.3218      -0.4723      -2.2390       0.9440  
optimizer (nloptwrap) convergence code: 0 (OK) ; 0 optimizer warnings; 1 lme4 warnings 
> # Singular
> summary(mod_test)
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errs + (DL | img)
   Data: tmp_dat

REML criterion at convergence: 330.5

Scaled residuals: 
     Min       1Q   Median       3Q      Max 
-2.66606 -0.68604  0.06367  0.70460  1.88350 

Random effects:
 Groups   Name        Variance Std.Dev. Corr 
 img      (Intercept) 6.4719   2.5440        
          DLTRUE      0.1669   0.4085   -1.00
 Residual             1.5491   1.2446        
Number of obs: 90, groups:  img, 9

Fixed effects:
             Estimate Std. Error t value
(Intercept) 100.32176    0.91698 109.405
DLTRUE       -0.47232    0.51189  -0.923
errs         -2.23900    0.05683 -39.401
DLTRUE:errs   0.94396    0.08036  11.746

Correlation of Fixed Effects:
            (Intr) DLTRUE errs  
DLTRUE      -0.505              
errs        -0.322  0.577       
DLTRUE:errs  0.228 -0.816 -0.707
optimizer (nloptwrap) convergence code: 0 (OK)
boundary (singular) fit: see help('isSingular')

> coef(mod_test)$img
   (Intercept)     DLTRUE      errs DLTRUE:errs
V1   102.03091 -0.7467713 -2.238995   0.9439595
V2   101.54619 -0.6689348 -2.238995   0.9439595
V3   102.33468 -0.7955515 -2.238995   0.9439595
V4    99.13645 -0.2819783 -2.238995   0.9439595
V5    95.72554  0.2657470 -2.238995   0.9439595
V6    98.30584 -0.1485985 -2.238995   0.9439595
V7    98.42529 -0.1677800 -2.238995   0.9439595
V8   103.15875 -0.9278803 -2.238995   0.9439595
V9   102.23218 -0.7790922 -2.238995   0.9439595
> 
> 
> (mod_test <- lmer(vals ~ DL * errs + (errs | img), tmp_dat))
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errs + (errs | img)
   Data: tmp_dat
REML criterion at convergence: 302.2821
Random effects:
 Groups   Name        Std.Dev. Corr
 img      (Intercept) 1.2507       
          errs        0.2238   0.89
 Residual             1.0224       
Number of obs: 90, groups:  img, 9
Fixed Effects:
(Intercept)       DLTRUE         errs  DLTRUE:errs  
   100.3218      -0.4723      -2.2390       0.9440  
> summary(mod_test)
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errs + (errs | img)
   Data: tmp_dat

REML criterion at convergence: 302.3

Scaled residuals: 
    Min      1Q  Median      3Q     Max 
-2.4380 -0.7063  0.1792  0.7233  2.1709 

Random effects:
 Groups   Name        Variance Std.Dev. Corr
 img      (Intercept) 1.56421  1.2507       
          errs        0.05007  0.2238   0.89
 Residual             1.04536  1.0224       
Number of obs: 90, groups:  img, 9

Fixed effects:
             Estimate Std. Error t value
(Intercept) 100.32176    0.50592 198.295
DLTRUE       -0.47232    0.40535  -1.165
errs         -2.23900    0.08799 -25.445
DLTRUE:errs   0.94396    0.06602  14.298

Correlation of Fixed Effects:
            (Intr) DLTRUE errs  
DLTRUE      -0.401              
errs         0.370  0.318       
DLTRUE:errs  0.339 -0.847 -0.375
> coef(mod_test)$img
   (Intercept)     DLTRUE      errs DLTRUE:errs
V1   101.22722 -0.4723155 -2.120530   0.9439595
V2   101.02845 -0.4723155 -2.173828   0.9439595
V3   101.28879 -0.4723155 -2.064824   0.9439595
V4    99.82362 -0.4723155 -2.367133   0.9439595
V5    98.08549 -0.4723155 -2.629077   0.9439595
V6    99.24363 -0.4723155 -2.370841   0.9439595
V7    99.46347 -0.4723155 -2.418301   0.9439595
V8   101.64199 -0.4723155 -1.978658   0.9439595
V9   101.09316 -0.4723155 -2.027767   0.9439595
> # Makes more sense without singularity????
> 
> 
> (mod_test <- lmer(vals ~ DL * errs + (DL * errs | img), tmp_dat))
boundary (singular) fit: see help('isSingular')
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errs + (DL * errs | img)
   Data: tmp_dat
REML criterion at convergence: 297.4191
Random effects:
 Groups   Name        Std.Dev. Corr             
 img      (Intercept) 1.5952                    
          DLTRUE      0.8073   -0.83            
          errs        0.1952    0.92 -0.98      
          DLTRUE:errs 0.0697    0.76 -0.99  0.95
 Residual             0.9778                    
Number of obs: 90, groups:  img, 9
Fixed Effects:
(Intercept)       DLTRUE         errs  DLTRUE:errs  
   100.3218      -0.4723      -2.2390       0.9440  
optimizer (nloptwrap) convergence code: 0 (OK) ; 0 optimizer warnings; 1 lme4 warnings 
> 
> summary(mod_test)
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * errs + (DL * errs | img)
   Data: tmp_dat

REML criterion at convergence: 297.4

Scaled residuals: 
     Min       1Q   Median       3Q      Max 
-1.95472 -0.75820  0.08308  0.79163  2.15820 

Random effects:
 Groups   Name        Variance Std.Dev. Corr             
 img      (Intercept) 2.544821 1.5952                    
          DLTRUE      0.651721 0.8073   -0.83            
          errs        0.038088 0.1952    0.92 -0.98      
          DLTRUE:errs 0.004858 0.0697    0.76 -0.99  0.95
 Residual             0.956164 0.9778                    
Number of obs: 90, groups:  img, 9

Fixed effects:
             Estimate Std. Error t value
(Intercept) 100.32176    0.59825 167.692
DLTRUE       -0.47232    0.47192  -1.001
errs         -2.23900    0.07890 -28.378
DLTRUE:errs   0.94396    0.06728  14.031

Correlation of Fixed Effects:
            (Intr) DLTRUE errs  
DLTRUE      -0.688              
errs         0.457 -0.183       
DLTRUE:errs  0.492 -0.849 -0.104
optimizer (nloptwrap) convergence code: 0 (OK)
boundary (singular) fit: see help('isSingular')

> coef(mod_test)$img
   (Intercept)      DLTRUE      errs DLTRUE:errs
V1   101.46226 -0.73697113 -2.146232   0.9605382
V2   101.18415 -0.51636845 -2.194976   0.9408766
V3   101.59772 -1.01648992 -2.093687   0.9873351
V4    99.64867  0.08215425 -2.360410   0.8943163
V5    97.43297  0.80893770 -2.576218   0.8408290
V6    98.96661 -0.21486769 -2.339673   0.9299667
V7    99.16768  0.17183234 -2.395860   0.8895199
V8   102.05647 -1.41212566 -2.007967   1.0229445
V9   101.37929 -1.41694139 -2.035936   1.0293091
> # Singular
> 
> 
> 
> 
> pdf('qqplots.pdf')
> p_MAPE + ggtitle('Q-Q Plot for residuals of radom effects model fitted to MAPE measures')
> p_RMSPE + ggtitle('Q-Q Plot for residuals of radom effects model fitted to RMSPE measures')
> p_SSIM + ggtitle('Q-Q Plot for residuals of radom effects model fitted to SSIM measures')
> dev.off()
pdf 
  2 
> 
> 
> proc.time()
   user  system elapsed 
  6.743   0.165   6.897 
