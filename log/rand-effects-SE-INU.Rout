
R version 4.2.1 (2022-06-23) -- "Funny-Looking Kid"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## FLASH
> 
> INU_vec <- c("00", "10", "20")
> all_normal <- c()
> all_DL     <- c()
> 
> for(i in 1:3){
+     f1 <- paste0("values/pred-noise-5-INU-", INU_vec[i], ".csv")
+     f2 <- paste0("values/DL-pred-noise-5-INU-", INU_vec[i], ".csv")
+ 
+     all_normal <- rbind(all_normal, as.matrix(read.csv(f1, header = F))[c(6,7,3, 13,14,10), ])
+     all_DL     <- rbind(all_DL    , as.matrix(read.csv(f2, header = F))[c(6,7,3, 13,14,10), ])
+ }
> 
> all_normal <- data.frame(all_normal)
> all_DL <- data.frame(all_DL)
> 
> method <- rep(c("LS", "MLE"), each=3, times=3)  # The second will be 3
> measures <- rep(c("MAPE", "RMSPE", "SSIM"), 3 * 2)
> INU <- rep(INU_vec, each = 3 * 2)
> DL <- rep(c(F, T), each = 3 * 3 * 2)
> 
> all_normal <- cbind(measures, INU, method, all_normal)
> all_DL     <- cbind(measures, INU, method, all_DL    )
> 
> all_dat <- cbind(DL, rbind(all_normal, all_DL))
> all_dat$INU <- as.numeric(all_dat$INU)
> 
> rm(DL)
> rm(measures)
> rm(INU)
> 
> 
> 
> 
> 
> 
> 
> 
> 
> library(tidyverse)
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──
✔ ggplot2 3.3.5     ✔ purrr   0.3.4
✔ tibble  3.1.6     ✔ dplyr   1.0.7
✔ tidyr   1.1.4     ✔ stringr 1.4.0
✔ readr   2.1.1     ✔ forcats 0.5.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
> library(lme4)
Loading required package: Matrix

Attaching package: ‘Matrix’

The following objects are masked from ‘package:tidyr’:

    expand, pack, unpack

> 
> 
> tmp_dat <- all_dat %>%
+     filter(measures == "SSIM") %>%
+     filter(method == "LS") %>%
+     pivot_longer(!c(DL, measures, INU, method), names_to = "img", values_to = "vals") 
> 
> 
> tmp_dat$INUf <- factor(tmp_dat$INU)
> (mod_test <- lmer(vals ~ DL * INUf + (1 | img), tmp_dat))   # random effect for intercept
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * INUf + (1 | img)
   Data: tmp_dat
REML criterion at convergence: 196.6985
Random effects:
 Groups   Name        Std.Dev.
 img      (Intercept) 3.138   
 Residual             1.198   
Number of obs: 54, groups:  img, 9
Fixed Effects:
  (Intercept)         DLTRUE         INUf10         INUf20  DLTRUE:INUf10  
     88.80213        5.58174       -0.03756       -1.02974        0.14586  
DLTRUE:INUf20  
      0.46463  
> 
> library(emmeans)
> emmeans_1 <- emmeans(mod_test, ~ DL | INUf)
> pairs(emmeans_1)
INUf = 0:
 contrast     estimate    SE df t.ratio p.value
 FALSE - TRUE    -5.58 0.565 40  -9.881  <.0001

INUf = 10:
 contrast     estimate    SE df t.ratio p.value
 FALSE - TRUE    -5.73 0.565 40 -10.140  <.0001

INUf = 20:
 contrast     estimate    SE df t.ratio p.value
 FALSE - TRUE    -6.05 0.565 40 -10.704  <.0001

Degrees-of-freedom method: kenward-roger 
> xtable::xtable(pairs(emmeans_1))
% latex table generated in R 4.2.1 by xtable 1.8-4 package
% Thu Jul 21 01:48:57 2022
\begin{table}[ht]
\centering
\begin{tabular}{lrrrrl}
  \hline
contrast & estimate & SE & df & t.ratio & p.value \\ 
  \hline
\multicolumn{6}{l}{INUf = 0}\\
FALSE - TRUE & -5.5817 & 0.5649 & 40 & -9.881 & $<$.0001 \\ 
   \hline
\multicolumn{6}{l}{INUf = 10}\\
FALSE - TRUE & -5.7276 & 0.5649 & 40 & -10.140 & $<$.0001 \\ 
   \hline
\multicolumn{6}{l}{INUf = 20}\\
FALSE - TRUE & -6.0464 & 0.5649 & 40 & -10.704 & $<$.0001 \\ 
   \hline
\multicolumn{6}{l}{{\footnotesize Degrees-of-freedom method: kenward-roger}}\\
\end{tabular}
\end{table}
> 
> library(ggResidpanel)
> resid_panel(mod_test)
> 
> 
> library(qqplotr)

Attaching package: ‘qqplotr’

The following objects are masked from ‘package:ggplot2’:

    stat_qq_line, StatQqLine

> type = "response"
> model = mod_test
> model_values <- data.frame(Residual = ggResidpanel:::helper_resid(type = "response", model = mod_test))
> r_label <- ggResidpanel:::helper_label(type, model)
> data_add <- ggResidpanel:::helper_plotly_label(model)
> model_values <- cbind(model_values, data_add)
> names(model_values)[which(names(model_values) == "data_add")] <- "Data"
> model_values <- model_values[order(model_values$Residual), ]
> plot <- ggplot(data = model_values, mapping = aes_string(sample = "Residual", 
+     label = "Data")) + stat_qq_point() + labs(x = "Theoretical Quantiles", 
+     y = "Sample Quantiles")
> plot_data <- ggplot_build(plot)
> model_values$Theoretical <- plot_data[[1]][[1]]$theoretical
> model_values$Residual_Plot <- model_values$Residual
> 
> 
> p_SSIM <- ggplot(data = model_values, mapping = aes_string(sample = "Residual_Plot", 
+     label = "Data")) + stat_qq_point() + 
+     labs(x = "Theoretical Quantiles", y = "Sample Quantiles") + 
+     stat_qq_line(color = "blue", size = 0.5) + 
+     theme_minimal() + theme(panel.background = element_rect(fill = "white", colour = "white", size = 0.5, linetype = "solid"), 
+                                 plot.background = element_rect(fill = "white"),
+                                 axis.text = element_text(size = 15),
+                                 axis.title = element_text(size = 20))
> 
> p_SSIM_band <- ggplot(data = model_values, mapping = aes_string(sample = "Residual_Plot", 
+     label = "Data")) + stat_qq_band() + stat_qq_point() + 
+     labs(x = "Theoretical Quantiles", y = "Sample Quantiles") + 
+     stat_qq_line(color = "blue", size = 0.5) + 
+     theme_minimal() + theme(panel.background = element_rect(fill = "white", colour = "white", size = 0.5, linetype = "solid"), 
+                                 plot.background = element_rect(fill = "white"),
+                                 axis.text = element_text(size = 15),
+                                 axis.title = element_text(size = 20))
> 
> p_SSIM
> p_SSIM_band
> 
> 
> 
> 
> 
> 
> 
> 
> 
> tmp_dat <- all_dat %>%
+     filter(measures == "MAPE") %>%
+     filter(method == "LS") %>%
+     pivot_longer(!c(DL, measures, INU, method), names_to = "img", values_to = "vals") 
> 
> 
> tmp_dat$INUf <- factor(tmp_dat$INU)
> (mod_test <- lmer(vals ~ DL * INUf + (1 | img), tmp_dat))   # random effect for intercept
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * INUf + (1 | img)
   Data: tmp_dat
REML criterion at convergence: -220.886
Random effects:
 Groups   Name        Std.Dev.
 img      (Intercept) 0.02130 
 Residual             0.01745 
Number of obs: 54, groups:  img, 9
Fixed Effects:
  (Intercept)         DLTRUE         INUf10         INUf20  DLTRUE:INUf10  
     0.204435      -0.067555       0.009879       0.048381       0.004181  
DLTRUE:INUf20  
     0.009769  
> 
> library(emmeans)
> emmeans_1 <- emmeans(mod_test, ~ DL | INUf)
> pairs(emmeans_1)
INUf = 0:
 contrast     estimate      SE df t.ratio p.value
 FALSE - TRUE   0.0676 0.00822 40   8.213  <.0001

INUf = 10:
 contrast     estimate      SE df t.ratio p.value
 FALSE - TRUE   0.0634 0.00822 40   7.705  <.0001

INUf = 20:
 contrast     estimate      SE df t.ratio p.value
 FALSE - TRUE   0.0578 0.00822 40   7.026  <.0001

Degrees-of-freedom method: kenward-roger 
> xtable::xtable(pairs(emmeans_1))
% latex table generated in R 4.2.1 by xtable 1.8-4 package
% Thu Jul 21 01:48:58 2022
\begin{table}[ht]
\centering
\begin{tabular}{lrrrrl}
  \hline
contrast & estimate & SE & df & t.ratio & p.value \\ 
  \hline
\multicolumn{6}{l}{INUf = 0}\\
FALSE - TRUE & 0.0676 & 0.0082 & 40 & 8.213 & $<$.0001 \\ 
   \hline
\multicolumn{6}{l}{INUf = 10}\\
FALSE - TRUE & 0.0634 & 0.0082 & 40 & 7.705 & $<$.0001 \\ 
   \hline
\multicolumn{6}{l}{INUf = 20}\\
FALSE - TRUE & 0.0578 & 0.0082 & 40 & 7.026 & $<$.0001 \\ 
   \hline
\multicolumn{6}{l}{{\footnotesize Degrees-of-freedom method: kenward-roger}}\\
\end{tabular}
\end{table}
> 
> library(ggResidpanel)
> resid_panel(mod_test)
> 
> 
> library(qqplotr)
> type = "response"
> model = mod_test
> model_values <- data.frame(Residual = ggResidpanel:::helper_resid(type = "response", model = mod_test))
> r_label <- ggResidpanel:::helper_label(type, model)
> data_add <- ggResidpanel:::helper_plotly_label(model)
> model_values <- cbind(model_values, data_add)
> names(model_values)[which(names(model_values) == "data_add")] <- "Data"
> model_values <- model_values[order(model_values$Residual), ]
> plot <- ggplot(data = model_values, mapping = aes_string(sample = "Residual", 
+     label = "Data")) + stat_qq_point() + labs(x = "Theoretical Quantiles", 
+     y = "Sample Quantiles")
> plot_data <- ggplot_build(plot)
> model_values$Theoretical <- plot_data[[1]][[1]]$theoretical
> model_values$Residual_Plot <- model_values$Residual
> 
> 
> p_MAPE <- ggplot(data = model_values, mapping = aes_string(sample = "Residual_Plot", 
+     label = "Data")) + stat_qq_point() + 
+     labs(x = "Theoretical Quantiles", y = "Sample Quantiles") + 
+     stat_qq_line(color = "blue", size = 0.5) + 
+     theme_minimal() + theme(panel.background = element_rect(fill = "white", colour = "white", size = 0.5, linetype = "solid"), 
+                                 plot.background = element_rect(fill = "white"),
+                                 axis.text = element_text(size = 15),
+                                 axis.title = element_text(size = 20))
> 
> p_MAPE_band <- ggplot(data = model_values, mapping = aes_string(sample = "Residual_Plot", 
+     label = "Data")) + stat_qq_band() + stat_qq_point() + 
+     labs(x = "Theoretical Quantiles", y = "Sample Quantiles") + 
+     stat_qq_line(color = "blue", size = 0.5) + 
+     theme_minimal() + theme(panel.background = element_rect(fill = "white", colour = "white", size = 0.5, linetype = "solid"), 
+                                 plot.background = element_rect(fill = "white"),
+                                 axis.text = element_text(size = 15),
+                                 axis.title = element_text(size = 20))
> 
> p_MAPE
> p_MAPE_band
> 
> 
> 
> 
> 
> tmp_dat <- all_dat %>%
+     filter(measures == "RMSPE") %>%
+     filter(method == "LS") %>%
+     pivot_longer(!c(DL, measures, INU, method), names_to = "img", values_to = "vals") 
> 
> 
> tmp_dat$INUf <- factor(tmp_dat$INU)
> (mod_test <- lmer(vals ~ DL * INUf + (1 | img), tmp_dat))   # random effect for intercept
Linear mixed model fit by REML ['lmerMod']
Formula: vals ~ DL * INUf + (1 | img)
   Data: tmp_dat
REML criterion at convergence: -197.0581
Random effects:
 Groups   Name        Std.Dev.
 img      (Intercept) 0.04323 
 Residual             0.02054 
Number of obs: 54, groups:  img, 9
Fixed Effects:
  (Intercept)         DLTRUE         INUf10         INUf20  DLTRUE:INUf10  
     0.257350      -0.078388       0.011672       0.058133       0.001530  
DLTRUE:INUf20  
     0.004976  
> 
> library(emmeans)
> emmeans_1 <- emmeans(mod_test, ~ DL | INUf)
> pairs(emmeans_1)
INUf = 0:
 contrast     estimate      SE df t.ratio p.value
 FALSE - TRUE   0.0784 0.00968 40   8.096  <.0001

INUf = 10:
 contrast     estimate      SE df t.ratio p.value
 FALSE - TRUE   0.0769 0.00968 40   7.938  <.0001

INUf = 20:
 contrast     estimate      SE df t.ratio p.value
 FALSE - TRUE   0.0734 0.00968 40   7.582  <.0001

Degrees-of-freedom method: kenward-roger 
> xtable::xtable(pairs(emmeans_1))
% latex table generated in R 4.2.1 by xtable 1.8-4 package
% Thu Jul 21 01:48:59 2022
\begin{table}[ht]
\centering
\begin{tabular}{lrrrrl}
  \hline
contrast & estimate & SE & df & t.ratio & p.value \\ 
  \hline
\multicolumn{6}{l}{INUf = 0}\\
FALSE - TRUE & 0.0784 & 0.0097 & 40 & 8.096 & $<$.0001 \\ 
   \hline
\multicolumn{6}{l}{INUf = 10}\\
FALSE - TRUE & 0.0769 & 0.0097 & 40 & 7.938 & $<$.0001 \\ 
   \hline
\multicolumn{6}{l}{INUf = 20}\\
FALSE - TRUE & 0.0734 & 0.0097 & 40 & 7.582 & $<$.0001 \\ 
   \hline
\multicolumn{6}{l}{{\footnotesize Degrees-of-freedom method: kenward-roger}}\\
\end{tabular}
\end{table}
> 
> library(ggResidpanel)
> resid_panel(mod_test)
> 
> 
> library(qqplotr)
> type = "response"
> model = mod_test
> model_values <- data.frame(Residual = ggResidpanel:::helper_resid(type = "response", model = mod_test))
> r_label <- ggResidpanel:::helper_label(type, model)
> data_add <- ggResidpanel:::helper_plotly_label(model)
> model_values <- cbind(model_values, data_add)
> names(model_values)[which(names(model_values) == "data_add")] <- "Data"
> model_values <- model_values[order(model_values$Residual), ]
> plot <- ggplot(data = model_values, mapping = aes_string(sample = "Residual", 
+     label = "Data")) + stat_qq_point() + labs(x = "Theoretical Quantiles", 
+     y = "Sample Quantiles")
> plot_data <- ggplot_build(plot)
> model_values$Theoretical <- plot_data[[1]][[1]]$theoretical
> model_values$Residual_Plot <- model_values$Residual
> 
> 
> p_RMSPE <- ggplot(data = model_values, mapping = aes_string(sample = "Residual_Plot", 
+     label = "Data")) + stat_qq_point() + 
+     labs(x = "Theoretical Quantiles", y = "Sample Quantiles") + 
+     stat_qq_line(color = "blue", size = 0.5) + 
+     theme_minimal() + theme(panel.background = element_rect(fill = "white", colour = "white", size = 0.5, linetype = "solid"), 
+                                 plot.background = element_rect(fill = "white"),
+                                 axis.text = element_text(size = 15),
+                                 axis.title = element_text(size = 20))
> 
> p_RMSPE_band <- ggplot(data = model_values, mapping = aes_string(sample = "Residual_Plot", 
+     label = "Data")) + stat_qq_band() + stat_qq_point() + 
+     labs(x = "Theoretical Quantiles", y = "Sample Quantiles") + 
+     stat_qq_line(color = "blue", size = 0.5) + 
+     theme_minimal() + theme(panel.background = element_rect(fill = "white", colour = "white", size = 0.5, linetype = "solid"), 
+                                 plot.background = element_rect(fill = "white"),
+                                 axis.text = element_text(size = 15),
+                                 axis.title = element_text(size = 20))
> 
> p_RMSPE
> p_RMSPE_band
> 
> 
> 
> 
> 
> pdf('qqplots-SE-INU.pdf')
> p_MAPE_band
> p_RMSPE_band
> p_SSIM_band
> 
> p_MAPE
> p_RMSPE
> p_SSIM
> 
> dev.off()
pdf 
  2 
> 
> 
> system("pdfcrop qqplots-SE-INU.pdf")
PDFCROP 1.40, 2020/06/06 - Copyright (c) 2002-2020 by Heiko Oberdiek, Oberdiek Package Support Group.
==> 6 pages written on `qqplots-SE-INU-crop.pdf'.
> 
> 
> 
> 
> 
> 
> proc.time()
   user  system elapsed 
  6.162   0.178   6.325 
